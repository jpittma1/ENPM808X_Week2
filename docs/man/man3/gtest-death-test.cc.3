.TH "build/_deps/googletest-src/googletest/src/gtest-death-test.cc" 3 "Tue Sep 12 2023" "Week2" \" -*- nroff -*-
.ad l
.nh
.SH NAME
build/_deps/googletest-src/googletest/src/gtest-death-test.cc
.SH SYNOPSIS
.br
.PP
\fC#include 'gtest/gtest\-death\-test\&.h'\fP
.br
\fC#include <functional>\fP
.br
\fC#include <memory>\fP
.br
\fC#include <sstream>\fP
.br
\fC#include <string>\fP
.br
\fC#include <utility>\fP
.br
\fC#include <vector>\fP
.br
\fC#include 'gtest/internal/custom/gtest\&.h'\fP
.br
\fC#include 'gtest/internal/gtest\-port\&.h'\fP
.br
\fC#include 'gtest/gtest\-message\&.h'\fP
.br
\fC#include 'gtest/internal/gtest\-string\&.h'\fP
.br
\fC#include 'src/gtest\-internal\-inl\&.h'\fP
.br

.SS "Namespaces"

.in +1c
.ti -1c
.RI " \fBtesting\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBGTEST_DEFINE_string_\fP (death_test_style, \fBtesting::internal::StringFromGTestEnv\fP('death_test_style', testing::kDefaultDeathTestStyle), 'Indicates how to run a death test in a forked child process: ' '\\'threadsafe\\' (child process re\-executes the test binary ' 'from the beginning, running only the specific death test) or ' '\\'fast\\' (child process runs the death test immediately ' '\fBafter\fP forking)\&.')"
.br
.ti -1c
.RI "\fBGTEST_DEFINE_bool_\fP (death_test_use_fork, \fBtesting::internal::BoolFromGTestEnv\fP('death_test_use_fork', false), 'Instructs to use fork()/_exit() instead of clone() in death tests\&. ' 'Ignored and always uses fork() on POSIX systems where clone() is not ' 'implemented\&. Useful when running under valgrind or similar tools if ' 'those do not support clone()\&. Valgrind 3\&.3\&.1 will just fail if ' 'it sees an unsupported combination of clone() flags\&. ' 'It is not recommended to use this flag w/o valgrind though it will ' 'work in 99% of the cases\&. Once valgrind is fixed, this flag will ' 'most likely be removed\&.')"
.br
.ti -1c
.RI "\fBGTEST_DEFINE_string_\fP (internal_run_death_test, '', 'Indicates the file, line number, temporal index of ' 'the single death test to run, and a file descriptor to ' 'which a success code may be sent, all separated by ' 'the '|' characters\&.  This flag is specified if and only if the ' 'current process is a sub\-process launched for running a thread\-safe ' 'death test\&.  FOR INTERNAL USE ONLY\&.')"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "GTEST_DEFINE_bool_ (death_test_use_fork, \fBtesting::internal::BoolFromGTestEnv\fP('death_test_use_fork', false), 'Instructs to use fork()/_exit() instead of clone() in death tests\&. ' 'Ignored and always uses fork() on POSIX systems where clone() is not ' 'implemented\&. Useful when running under valgrind or similar tools if ' 'those do not support clone()\&. Valgrind 3\&.3\&.1 will just fail if ' 'it sees an unsupported combination of clone() flags\&. ' 'It is not recommended to use this flag w/o valgrind though it will ' 'work in 99% of the cases\&. Once valgrind is fixed, this flag will ' 'most likely be removed\&.')"

.SS "GTEST_DEFINE_string_ (death_test_style, \fBtesting::internal::StringFromGTestEnv\fP('death_test_style', testing::kDefaultDeathTestStyle), 'Indicates how to run a death test in a forked child process: ' '\\'threadsafe\\' (child process re\-executes the test binary ' 'from the beginning, running only the specific death test) or ' '\\'fast\\' (child process runs the death test immediately ' '\fBafter\fP forking)\&.')"

.SS "GTEST_DEFINE_string_ (internal_run_death_test, '', 'Indicates the file, line number, temporal index of ' 'the single death test to run, and a file descriptor to ' 'which a success code may be sent, all separated by ' 'the '|' characters\&. This flag is specified if and only if the ' 'current process is a sub\-process launched for running a thread\-safe ' 'death test\&. FOR INTERNAL USE ONLY\&.')"

.SH "Author"
.PP 
Generated automatically by Doxygen for Week2 from the source code\&.
