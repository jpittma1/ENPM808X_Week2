.TH "md_build__deps_googletest_src_docs_pkgconfig" 3 "Tue Sep 12 2023" "Week2" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_build__deps_googletest_src_docs_pkgconfig \- Using GoogleTest from various build systems 
GoogleTest comes with pkg-config files that can be used to determine all necessary flags for compiling and linking to GoogleTest (and GoogleMock)\&. Pkg-config is a standardised plain-text format containing
.PP
.IP "\(bu" 2
the includedir (-I) path
.IP "\(bu" 2
necessary macro (-D) definitions
.IP "\(bu" 2
further required flags (-pthread)
.IP "\(bu" 2
the library (-L) path
.IP "\(bu" 2
the library (-l) to link to
.PP
.PP
All current build systems support pkg-config in one way or another\&. For all examples here we assume you want to compile the sample \fC\fBsamples/sample3_unittest\&.cc\fP\fP\&.
.SS "CMake"
Using \fCpkg-config\fP in CMake is fairly easy:
.PP
.PP
.nf
find_package(PkgConfig)
pkg_search_module(GTEST REQUIRED gtest_main)

add_executable(testapp)
target_sources(testapp PRIVATE samples/sample3_unittest\&.cc)
target_link_libraries(testapp PRIVATE ${GTEST_LDFLAGS})
target_compile_options(testapp PRIVATE ${GTEST_CFLAGS})

enable_testing()
add_test(first_and_only_test testapp)
.fi
.PP
.PP
It is generally recommended that you use \fCtarget_compile_options\fP + \fC_CFLAGS\fP over \fCtarget_include_directories\fP + \fC_INCLUDE_DIRS\fP as the former includes not just -I flags (GoogleTest might require a macro indicating to internal headers that all libraries have been compiled with threading enabled\&. In addition, GoogleTest might also require \fC-pthread\fP in the compiling step, and as such splitting the pkg-config \fCCflags\fP variable into include dirs and macros for \fCtarget_compile_definitions()\fP might still miss this)\&. The same recommendation goes for using \fC_LDFLAGS\fP over the more commonplace \fC_LIBRARIES\fP, which happens to discard \fC-L\fP flags and \fC-pthread\fP\&.
.SS "Help! pkg-config can't find GoogleTest!"
Let's say you have a \fCCMakeLists\&.txt\fP along the lines of the one in this tutorial and you try to run \fCcmake\fP\&. It is very possible that you get a failure along the lines of:
.PP
.PP
.nf
-- Checking for one of the modules 'gtest_main'
CMake Error at /usr/share/cmake/Modules/FindPkgConfig\&.cmake:640 (message):
  None of the required 'gtest_main' found
.fi
.PP
.PP
These failures are common if you installed GoogleTest yourself and have not sourced it from a distro or other package manager\&. If so, you need to tell pkg-config where it can find the \fC\&.pc\fP files containing the information\&. Say you installed GoogleTest to \fC/usr/local\fP, then it might be that the \fC\&.pc\fP files are installed under \fC/usr/local/lib64/pkgconfig\fP\&. If you set
.PP
.PP
.nf
export PKG_CONFIG_PATH=/usr/local/lib64/pkgconfig
.fi
.PP
.PP
pkg-config will also try to look in \fCPKG_CONFIG_PATH\fP to find \fCgtest_main\&.pc\fP\&.
.SS "Using pkg-config in a cross-compilation setting"
Pkg-config can be used in a cross-compilation setting too\&. To do this, let's assume the final prefix of the cross-compiled installation will be \fC/usr\fP, and your sysroot is \fC/home/MYUSER/sysroot\fP\&. Configure and install GTest using
.PP
.PP
.nf
mkdir build && cmake -DCMAKE_INSTALL_PREFIX=/usr \&.\&.
.fi
.PP
.PP
Install into the sysroot using \fCDESTDIR\fP:
.PP
.PP
.nf
make -j install DESTDIR=/home/MYUSER/sysroot
.fi
.PP
.PP
Before we continue, it is recommended to \fBalways\fP define the following two variables for pkg-config in a cross-compilation setting:
.PP
.PP
.nf
export PKG_CONFIG_ALLOW_SYSTEM_CFLAGS=yes
export PKG_CONFIG_ALLOW_SYSTEM_LIBS=yes
.fi
.PP
.PP
otherwise \fCpkg-config\fP will filter \fC-I\fP and \fC-L\fP flags against standard prefixes such as \fC/usr\fP (see https://bugs.freedesktop.org/show_bug.cgi?id=28264#c3 for reasons why this stripping needs to occur usually)\&.
.PP
If you look at the generated pkg-config file, it will look something like
.PP
.PP
.nf
libdir=/usr/lib64
includedir=/usr/include

Name: gtest
Description: GoogleTest (without main() function)
Version: 1\&.11\&.0
URL: https://github\&.com/google/googletest
Libs: -L${libdir} -lgtest -lpthread
Cflags: -I${includedir} -DGTEST_HAS_PTHREAD=1 -lpthread
.fi
.PP
.PP
Notice that the sysroot is not included in \fClibdir\fP and \fCincludedir\fP! If you try to run \fCpkg-config\fP with the correct \fCPKG_CONFIG_LIBDIR=/home/MYUSER/sysroot/usr/lib64/pkgconfig\fP against this \fC\&.pc\fP file, you will get
.PP
.PP
.nf
$ pkg-config --cflags gtest
-DGTEST_HAS_PTHREAD=1 -lpthread -I/usr/include
$ pkg-config --libs gtest
-L/usr/lib64 -lgtest -lpthread
.fi
.PP
.PP
which is obviously wrong and points to the \fCCBUILD\fP and not \fCCHOST\fP root\&. In order to use this in a cross-compilation setting, we need to tell pkg-config to inject the actual sysroot into \fC-I\fP and \fC-L\fP variables\&. Let us now tell pkg-config about the actual sysroot
.PP
.PP
.nf
export PKG_CONFIG_DIR=
export PKG_CONFIG_SYSROOT_DIR=/home/MYUSER/sysroot
export PKG_CONFIG_LIBDIR=${PKG_CONFIG_SYSROOT_DIR}/usr/lib64/pkgconfig
.fi
.PP
.PP
and running \fCpkg-config\fP again we get
.PP
.PP
.nf
$ pkg-config --cflags gtest
-DGTEST_HAS_PTHREAD=1 -lpthread -I/home/MYUSER/sysroot/usr/include
$ pkg-config --libs gtest
-L/home/MYUSER/sysroot/usr/lib64 -lgtest -lpthread
.fi
.PP
.PP
which contains the correct sysroot now\&. For a more comprehensive guide to also including \fC${CHOST}\fP in build system calls, see the excellent tutorial by Diego Elio Petten√≤: https://autotools.io/pkgconfig/cross-compiling.html 
