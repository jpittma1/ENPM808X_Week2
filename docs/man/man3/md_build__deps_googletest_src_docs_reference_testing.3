.TH "md_build__deps_googletest_src_docs_reference_testing" 3 "Tue Sep 12 2023" "Week2" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_build__deps_googletest_src_docs_reference_testing \- Testing Reference 
This page lists the facilities provided by GoogleTest for writing test programs\&. To use them, include the header \fC\fBgtest/gtest\&.h\fP\fP\&.
.SH "Macros"
.PP
GoogleTest defines the following macros for writing tests\&.
.SS "TEST"
.PP
.nf

TEST(\fITestSuiteName\fP, \fITestName\fP) {
  \&.\&.\&. \fIstatements\fP \&.\&.\&.
}
.fi
.PP
.PP
Defines an individual test named *\fCTestName\fP* in the test suite *\fCTestSuiteName\fP*, consisting of the given statements\&.
.PP
Both arguments *\fCTestSuiteName\fP* and *\fCTestName\fP* must be valid C++ identifiers and must not contain underscores (\fC_\fP)\&. Tests in different test suites can have the same individual name\&.
.PP
The statements within the test body can be any code under test\&. \fBAssertions\fP used within the test body determine the outcome of the test\&.
.SS "TEST_F"
.PP
.nf

TEST_F(\fITestFixtureName\fP, \fITestName\fP) {
  \&.\&.\&. \fIstatements\fP \&.\&.\&.
}
.fi
.PP
.PP
Defines an individual test named *\fCTestName\fP* that uses the test fixture class *\fCTestFixtureName\fP*\&. The test suite name is *\fCTestFixtureName\fP*\&.
.PP
Both arguments *\fCTestFixtureName\fP* and *\fCTestName\fP* must be valid C++ identifiers and must not contain underscores (\fC_\fP)\&. *\fCTestFixtureName\fP* must be the name of a test fixture class—see \fCTest Fixtures\fP\&.
.PP
The statements within the test body can be any code under test\&. \fBAssertions\fP used within the test body determine the outcome of the test\&.
.SS "TEST_P"
.PP
.nf

TEST_P(\fITestFixtureName\fP, \fITestName\fP) {
  \&.\&.\&. \fIstatements\fP \&.\&.\&.
}
.fi
.PP
.PP
Defines an individual value-parameterized test named *\fCTestName\fP* that uses the test fixture class *\fCTestFixtureName\fP*\&. The test suite name is *\fCTestFixtureName\fP*\&.
.PP
Both arguments *\fCTestFixtureName\fP* and *\fCTestName\fP* must be valid C++ identifiers and must not contain underscores (\fC_\fP)\&. *\fCTestFixtureName\fP* must be the name of a value-parameterized test fixture class—see \fCValue-Parameterized Tests\fP\&.
.PP
The statements within the test body can be any code under test\&. Within the test body, the test parameter can be accessed with the \fCGetParam()\fP function (see \fC\fCWithParamInterface\fP\fP)\&. For example:
.PP
.PP
.nf
TEST_P(MyTestSuite, DoesSomething) {
  \&.\&.\&.
  EXPECT_TRUE(DoSomething(GetParam()));
  \&.\&.\&.
}
.fi
.PP
.PP
\fBAssertions\fP used within the test body determine the outcome of the test\&.
.PP
See also \fC\fCINSTANTIATE_TEST_SUITE_P\fP\fP\&.
.SS "INSTANTIATE_TEST_SUITE_P"
\fCINSTANTIATE_TEST_SUITE_P(\fP*\fCInstantiationName\fP*\fC,\fP*\fCTestSuiteName\fP*\fC,\fP*\fCparam_generator\fP*\fC)\fP \\ \fCINSTANTIATE_TEST_SUITE_P(\fP*\fCInstantiationName\fP*\fC,\fP*\fCTestSuiteName\fP*\fC,\fP*\fCparam_generator\fP*\fC,\fP*\fCname_generator\fP*\fC)\fP
.PP
Instantiates the value-parameterized test suite *\fCTestSuiteName\fP* (defined with \fC\fCTEST_P\fP\fP)\&.
.PP
The argument *\fCInstantiationName\fP* is a unique name for the instantiation of the test suite, to distinguish between multiple instantiations\&. In test output, the instantiation name is added as a prefix to the test suite name *\fCTestSuiteName\fP*\&.
.PP
The argument *\fCparam_generator\fP* is one of the following GoogleTest-provided functions that generate the test parameters, all defined in the \fC\fBtesting\fP\fP namespace:
.PP
.PP
Parameter Generator   Behavior    \fCRange(begin, end [, step])\fP   Yields values \fC{begin, begin+step, begin+step+step, \&.\&.\&.}\fP\&. The values do not include \fCend\fP\&. \fCstep\fP defaults to 1\&.    \fCValues(v1, v2, \&.\&.\&., vN)\fP   Yields values \fC{v1, v2, \&.\&.\&., vN}\fP\&.    \fCValuesIn(container)\fP or \fCValuesIn(begin,end)\fP   Yields values from a C-style array, an STL-style container, or an iterator range \fC[begin, end)\fP\&.    \fC\fBBool()\fP\fP   Yields sequence \fC{false, true}\fP\&.    \fCCombine(g1, g2, \&.\&.\&., gN)\fP   Yields as \fCstd::tuple\fP \fIn\fP-tuples all combinations (Cartesian product) of the values generated by the given \fIn\fP generators \fCg1\fP, \fCg2\fP, \&.\&.\&., \fCgN\fP\&.    \fCConvertGenerator<T>(g)\fP   Yields values generated by generator \fCg\fP, \fCstatic_cast\fP to \fCT\fP\&.   
.PP
The optional last argument *\fCname_generator\fP* is a function or functor that generates custom test name suffixes based on the test parameters\&. The function must accept an argument of type \fC\fCTestParamInfo<class ParamType>\fP\fP and return a \fCstd::string\fP\&. The test name suffix can only contain alphanumeric characters and underscores\&. GoogleTest provides \fC\fCPrintToStringParamName\fP\fP, or a custom function can be used for more control:
.PP
.PP
.nf
INSTANTIATE_TEST_SUITE_P(
    MyInstantiation, MyTestSuite,
    testing::Values(\&.\&.\&.),
    [](const testing::TestParamInfo<MyTestSuite::ParamType>& info) {
      // Can use info\&.param here to generate the test suffix
      std::string name = \&.\&.\&.
      return name;
    });
.fi
.PP
.PP
For more information, see \fCValue-Parameterized Tests\fP\&.
.PP
See also \fC\fCGTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST\fP\fP\&.
.SS "TYPED_TEST_SUITE"
\fCTYPED_TEST_SUITE(\fP*\fCTestFixtureName\fP*\fC,\fP*\fCTypes\fP*\fC)\fP
.PP
Defines a typed test suite based on the test fixture *\fCTestFixtureName\fP*\&. The test suite name is *\fCTestFixtureName\fP*\&.
.PP
The argument *\fCTestFixtureName\fP* is a fixture class template, parameterized by a type, for example:
.PP
.PP
.nf
template <typename T>
class MyFixture : public testing::Test {
 public:
  \&.\&.\&.
  using List = std::list<T>;
  static T shared_;
  T value_;
};
.fi
.PP
.PP
The argument *\fCTypes\fP* is a \fC\fCTypes\fP\fP object representing the list of types to run the tests on, for example:
.PP
.PP
.nf
using MyTypes = ::testing::Types<char, int, unsigned int>;
TYPED_TEST_SUITE(MyFixture, MyTypes);
.fi
.PP
.PP
The type alias (\fCusing\fP or \fCtypedef\fP) is necessary for the \fCTYPED_TEST_SUITE\fP macro to parse correctly\&.
.PP
See also \fC\fCTYPED_TEST\fP\fP and \fCTyped Tests\fP for more information\&.
.SS "TYPED_TEST"
.PP
.nf

TYPED_TEST(\fITestSuiteName\fP, \fITestName\fP) {
  \&.\&.\&. \fIstatements\fP \&.\&.\&.
}
.fi
.PP
.PP
Defines an individual typed test named *\fCTestName\fP* in the typed test suite *\fCTestSuiteName\fP*\&. The test suite must be defined with \fC\fCTYPED_TEST_SUITE\fP\fP\&.
.PP
Within the test body, the special name \fCTypeParam\fP refers to the type parameter, and \fCTestFixture\fP refers to the fixture class\&. See the following example:
.PP
.PP
.nf
TYPED_TEST(MyFixture, Example) {
  // Inside a test, refer to the special name TypeParam to get the type
  // parameter\&.  Since we are inside a derived class template, C++ requires
  // us to visit the members of MyFixture via 'this'\&.
  TypeParam n = this->value_;

  // To visit static members of the fixture, add the 'TestFixture::'
  // prefix\&.
  n += TestFixture::shared_;

  // To refer to typedefs in the fixture, add the 'typename TestFixture::'
  // prefix\&. The 'typename' is required to satisfy the compiler\&.
  typename TestFixture::List values;

  values\&.push_back(n);
  \&.\&.\&.
}
.fi
.PP
.PP
For more information, see \fCTyped Tests\fP\&.
.SS "TYPED_TEST_SUITE_P"
\fCTYPED_TEST_SUITE_P(\fP*\fCTestFixtureName\fP*\fC)\fP
.PP
Defines a type-parameterized test suite based on the test fixture *\fCTestFixtureName\fP*\&. The test suite name is *\fCTestFixtureName\fP*\&.
.PP
The argument *\fCTestFixtureName\fP* is a fixture class template, parameterized by a type\&. See \fC\fCTYPED_TEST_SUITE\fP\fP for an example\&.
.PP
See also \fC\fCTYPED_TEST_P\fP\fP and \fCType-Parameterized Tests\fP for more information\&.
.SS "TYPED_TEST_P"
.PP
.nf

TYPED_TEST_P(\fITestSuiteName\fP, \fITestName\fP) {
  \&.\&.\&. \fIstatements\fP \&.\&.\&.
}
.fi
.PP
.PP
Defines an individual type-parameterized test named *\fCTestName\fP* in the type-parameterized test suite *\fCTestSuiteName\fP*\&. The test suite must be defined with \fC\fCTYPED_TEST_SUITE_P\fP\fP\&.
.PP
Within the test body, the special name \fCTypeParam\fP refers to the type parameter, and \fCTestFixture\fP refers to the fixture class\&. See \fC\fCTYPED_TEST\fP\fP for an example\&.
.PP
See also \fC\fCREGISTER_TYPED_TEST_SUITE_P\fP\fP and \fCType-Parameterized Tests\fP for more information\&.
.SS "REGISTER_TYPED_TEST_SUITE_P"
\fCREGISTER_TYPED_TEST_SUITE_P(\fP*\fCTestSuiteName\fP*\fC,\fP*\fCTestNames\&.\&.\&.\fP*\fC)\fP
.PP
Registers the type-parameterized tests *\fCTestNames\&.\&.\&.\fP* of the test suite *\fCTestSuiteName\fP*\&. The test suite and tests must be defined with \fC\fCTYPED_TEST_SUITE_P\fP\fP and \fC\fCTYPED_TEST_P\fP\fP\&.
.PP
For example:
.PP
.PP
.nf
// Define the test suite and tests\&.
TYPED_TEST_SUITE_P(MyFixture);
TYPED_TEST_P(MyFixture, HasPropertyA) { \&.\&.\&. }
TYPED_TEST_P(MyFixture, HasPropertyB) { \&.\&.\&. }

// Register the tests in the test suite\&.
REGISTER_TYPED_TEST_SUITE_P(MyFixture, HasPropertyA, HasPropertyB);
.fi
.PP
.PP
See also \fC\fCINSTANTIATE_TYPED_TEST_SUITE_P\fP\fP and \fCType-Parameterized Tests\fP for more information\&.
.SS "INSTANTIATE_TYPED_TEST_SUITE_P"
\fCINSTANTIATE_TYPED_TEST_SUITE_P(\fP*\fCInstantiationName\fP*\fC,\fP*\fCTestSuiteName\fP*\fC,\fP*\fCTypes\fP*\fC)\fP
.PP
Instantiates the type-parameterized test suite *\fCTestSuiteName\fP*\&. The test suite must be registered with \fC\fCREGISTER_TYPED_TEST_SUITE_P\fP\fP\&.
.PP
The argument *\fCInstantiationName\fP* is a unique name for the instantiation of the test suite, to distinguish between multiple instantiations\&. In test output, the instantiation name is added as a prefix to the test suite name *\fCTestSuiteName\fP*\&.
.PP
The argument *\fCTypes\fP* is a \fC\fCTypes\fP\fP object representing the list of types to run the tests on, for example:
.PP
.PP
.nf
using MyTypes = ::testing::Types<char, int, unsigned int>;
INSTANTIATE_TYPED_TEST_SUITE_P(MyInstantiation, MyFixture, MyTypes);
.fi
.PP
.PP
The type alias (\fCusing\fP or \fCtypedef\fP) is necessary for the \fCINSTANTIATE_TYPED_TEST_SUITE_P\fP macro to parse correctly\&.
.PP
For more information, see \fCType-Parameterized Tests\fP\&.
.SS "FRIEND_TEST"
\fCFRIEND_TEST(\fP*\fCTestSuiteName\fP*\fC,\fP*\fCTestName\fP*\fC)\fP
.PP
Within a class body, declares an individual test as a friend of the class, enabling the test to access private class members\&.
.PP
If the class is defined in a namespace, then in order to be friends of the class, test fixtures and tests must be defined in the exact same namespace, without inline or anonymous namespaces\&.
.PP
For example, if the class definition looks like the following:
.PP
.PP
.nf
namespace my_namespace {

class MyClass {
  friend class MyClassTest;
  FRIEND_TEST(MyClassTest, HasPropertyA);
  FRIEND_TEST(MyClassTest, HasPropertyB);
  \&.\&.\&. definition of class MyClass \&.\&.\&.
};

}  // namespace my_namespace
.fi
.PP
.PP
Then the test code should look like:
.PP
.PP
.nf
namespace my_namespace {

class MyClassTest : public testing::Test {
  \&.\&.\&.
};

TEST_F(MyClassTest, HasPropertyA) { \&.\&.\&. }
TEST_F(MyClassTest, HasPropertyB) { \&.\&.\&. }

}  // namespace my_namespace
.fi
.PP
.PP
See \fCTesting Private Code\fP for more information\&.
.SS "SCOPED_TRACE"
\fCSCOPED_TRACE(\fP*\fCmessage\fP*\fC)\fP
.PP
Causes the current file name, line number, and the given message *\fCmessage\fP* to be added to the failure message for each assertion failure that occurs in the scope\&.
.PP
For more information, see \fCAdding Traces to Assertions\fP\&.
.PP
See also the \fC\fCScopedTrace\fP class\fP\&.
.SS "GTEST_SKIP"
\fC\fBGTEST_SKIP()\fP\fP
.PP
Prevents further test execution at runtime\&.
.PP
Can be used in individual test cases or in the \fCSetUp()\fP methods of test environments or test fixtures (classes derived from the \fC\fCEnvironment\fP\fP or \fC\fCTest\fP\fP classes)\&. If used in a global test environment \fCSetUp()\fP method, it skips all tests in the test program\&. If used in a test fixture \fCSetUp()\fP method, it skips all tests in the corresponding test suite\&.
.PP
Similar to assertions, \fCGTEST_SKIP\fP allows streaming a custom message into it\&.
.PP
See \fCSkipping Test Execution\fP for more information\&.
.SS "GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST"
\fCGTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST(\fP*\fCTestSuiteName\fP*\fC)\fP
.PP
Allows the value-parameterized test suite *\fCTestSuiteName\fP* to be uninstantiated\&.
.PP
By default, every \fC\fCTEST_P\fP\fP call without a corresponding \fC\fCINSTANTIATE_TEST_SUITE_P\fP\fP call causes a failing test in the test suite \fCGoogleTestVerification\fP\&. \fCGTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST\fP suppresses this failure for the given test suite\&.
.SH "Classes and types"
.PP
GoogleTest defines the following classes and types to help with writing tests\&.
.SS "AssertionResult"
\fCtesting::AssertionResult\fP
.PP
A class for indicating whether an assertion was successful\&.
.PP
When the assertion wasn't successful, the \fCAssertionResult\fP object stores a non-empty failure message that can be retrieved with the object's \fC\fBmessage()\fP\fP method\&.
.PP
To create an instance of this class, use one of the factory functions \fC\fCAssertionSuccess()\fP\fP or \fC\fCAssertionFailure()\fP\fP\&.
.SS "AssertionException"
\fCtesting::AssertionException\fP
.PP
Exception which can be thrown from \fC\fCTestEventListener::OnTestPartResult\fP\fP\&.
.SS "EmptyTestEventListener"
\fC\fBtesting::EmptyTestEventListener\fP\fP
.PP
Provides an empty implementation of all methods in the \fC\fCTestEventListener\fP\fP interface, such that a subclass only needs to override the methods it cares about\&.
.SS "Environment"
\fC\fBtesting::Environment\fP\fP
.PP
Represents a global test environment\&. See \fCGlobal Set-Up and Tear-Down\fP\&.
.SS "Protected Methods"
.SS "SetUp {#Environment::SetUp}"
\fCvirtual void Environment::SetUp()\fP
.PP
Override this to define how to set up the environment\&.
.SS "TearDown {#Environment::TearDown}"
\fCvirtual void Environment::TearDown()\fP
.PP
Override this to define how to tear down the environment\&.
.SS "ScopedTrace"
\fC\fBtesting::ScopedTrace\fP\fP
.PP
An instance of this class causes a trace to be included in every test failure message generated by code in the scope of the lifetime of the \fCScopedTrace\fP instance\&. The effect is undone with the destruction of the instance\&.
.PP
The \fCScopedTrace\fP constructor has the following form:
.PP
.PP
.nf
template <typename T>
ScopedTrace(const char* file, int line, const T& message)
.fi
.PP
.PP
Example usage:
.PP
.PP
.nf
testing::ScopedTrace trace("file\&.cc", 123, "message");
.fi
.PP
.PP
The resulting trace includes the given source file path and line number, and the given message\&. The \fCmessage\fP argument can be anything streamable to \fCstd::ostream\fP\&.
.PP
See also \fC\fCSCOPED_TRACE\fP\fP\&.
.SS "Test"
\fC\fBtesting::Test\fP\fP
.PP
The abstract class that all tests inherit from\&. \fCTest\fP is not copyable\&.
.SS "Public Methods"
.SS "SetUpTestSuite {#Test::SetUpTestSuite}"
\fCstatic void Test::SetUpTestSuite()\fP
.PP
Performs shared setup for all tests in the test suite\&. GoogleTest calls \fCSetUpTestSuite()\fP before running the first test in the test suite\&.
.SS "TearDownTestSuite {#Test::TearDownTestSuite}"
\fCstatic void Test::TearDownTestSuite()\fP
.PP
Performs shared teardown for all tests in the test suite\&. GoogleTest calls \fCTearDownTestSuite()\fP after running the last test in the test suite\&.
.SS "HasFatalFailure {#Test::HasFatalFailure}"
\fCstatic bool Test::HasFatalFailure()\fP
.PP
Returns true if and only if the current test has a fatal failure\&.
.SS "HasNonfatalFailure {#Test::HasNonfatalFailure}"
\fCstatic bool Test::HasNonfatalFailure()\fP
.PP
Returns true if and only if the current test has a nonfatal failure\&.
.SS "HasFailure {#Test::HasFailure}"
\fCstatic bool Test::HasFailure()\fP
.PP
Returns true if and only if the current test has any failure, either fatal or nonfatal\&.
.SS "IsSkipped {#Test::IsSkipped}"
\fCstatic bool Test::IsSkipped()\fP
.PP
Returns true if and only if the current test was skipped\&.
.SS "RecordProperty {#Test::RecordProperty}"
\fCstatic void Test::RecordProperty(const std::string& key, const std::string& value)\fP \\ \fCstatic void Test::RecordProperty(const std::string& key, int value)\fP
.PP
Logs a property for the current test, test suite, or entire invocation of the test program\&. Only the last value for a given key is logged\&.
.PP
The key must be a valid XML attribute name, and cannot conflict with the ones already used by GoogleTest (\fCname\fP, \fCfile\fP, \fCline\fP, \fCstatus\fP, \fCtime\fP, \fCclassname\fP, \fCtype_param\fP, and \fCvalue_param\fP)\&.
.PP
\fCRecordProperty\fP is \fCpublic static\fP so it can be called from utility functions that are not members of the test fixture\&.
.PP
Calls to \fCRecordProperty\fP made during the lifespan of the test (from the moment its constructor starts to the moment its destructor finishes) are output in XML as attributes of the \fC<testcase>\fP element\&. Properties recorded from a fixture's \fCSetUpTestSuite\fP or \fCTearDownTestSuite\fP methods are logged as attributes of the corresponding \fC<testsuite>\fP element\&. Calls to \fCRecordProperty\fP made in the global context (before or after invocation of \fCRUN_ALL_TESTS\fP or from the \fCSetUp\fP/\fCTearDown\fP methods of registered \fCEnvironment\fP objects) are output as attributes of the \fC<testsuites>\fP element\&.
.SS "Protected Methods"
.SS "SetUp {#Test::SetUp}"
\fCvirtual void Test::SetUp()\fP
.PP
Override this to perform test fixture setup\&. GoogleTest calls \fCSetUp()\fP before running each individual test\&.
.SS "TearDown {#Test::TearDown}"
\fCvirtual void Test::TearDown()\fP
.PP
Override this to perform test fixture teardown\&. GoogleTest calls \fCTearDown()\fP after running each individual test\&.
.SS "TestWithParam"
\fC\fBtesting::TestWithParam\fP<T>\fP
.PP
A convenience class which inherits from both \fC\fCTest\fP\fP and \fC\fCWithParamInterface<T>\fP\fP\&.
.SS "TestSuite"
Represents a test suite\&. \fCTestSuite\fP is not copyable\&.
.SS "Public Methods"
.SS "name {#TestSuite::name}"
\fCconst char* TestSuite::name() const\fP
.PP
Gets the name of the test suite\&.
.SS "type_param {#TestSuite::type_param}"
\fCconst char* TestSuite::type_param() const\fP
.PP
Returns the name of the parameter type, or \fCNULL\fP if this is not a typed or type-parameterized test suite\&. See \fCTyped Tests\fP and \fCType-Parameterized Tests\fP\&.
.SS "should_run {#TestSuite::should_run}"
\fCbool TestSuite::should_run() const\fP
.PP
Returns true if any test in this test suite should run\&.
.SS "successful_test_count {#TestSuite::successful_test_count}"
\fCint TestSuite::successful_test_count() const\fP
.PP
Gets the number of successful tests in this test suite\&.
.SS "skipped_test_count {#TestSuite::skipped_test_count}"
\fCint TestSuite::skipped_test_count() const\fP
.PP
Gets the number of skipped tests in this test suite\&.
.SS "failed_test_count {#TestSuite::failed_test_count}"
\fCint TestSuite::failed_test_count() const\fP
.PP
Gets the number of failed tests in this test suite\&.
.SS "reportable_disabled_test_count {#TestSuite::reportable_disabled_test_count}"
\fCint TestSuite::reportable_disabled_test_count() const\fP
.PP
Gets the number of disabled tests that will be reported in the XML report\&.
.SS "disabled_test_count {#TestSuite::disabled_test_count}"
\fCint TestSuite::disabled_test_count() const\fP
.PP
Gets the number of disabled tests in this test suite\&.
.SS "reportable_test_count {#TestSuite::reportable_test_count}"
\fCint TestSuite::reportable_test_count() const\fP
.PP
Gets the number of tests to be printed in the XML report\&.
.SS "test_to_run_count {#TestSuite::test_to_run_count}"
\fCint TestSuite::test_to_run_count() const\fP
.PP
Get the number of tests in this test suite that should run\&.
.SS "total_test_count {#TestSuite::total_test_count}"
\fCint TestSuite::total_test_count() const\fP
.PP
Gets the number of all tests in this test suite\&.
.SS "Passed {#TestSuite::Passed}"
\fCbool TestSuite::Passed() const\fP
.PP
Returns true if and only if the test suite passed\&.
.SS "Failed {#TestSuite::Failed}"
\fCbool TestSuite::Failed() const\fP
.PP
Returns true if and only if the test suite failed\&.
.SS "elapsed_time {#TestSuite::elapsed_time}"
\fCTimeInMillis TestSuite::elapsed_time() const\fP
.PP
Returns the elapsed time, in milliseconds\&.
.SS "start_timestamp {#TestSuite::start_timestamp}"
\fCTimeInMillis TestSuite::start_timestamp() const\fP
.PP
Gets the time of the test suite start, in ms from the start of the UNIX epoch\&.
.SS "GetTestInfo {#TestSuite::GetTestInfo}"
\fCconst TestInfo* TestSuite::GetTestInfo(int i) const\fP
.PP
Returns the \fC\fCTestInfo\fP\fP for the \fCi\fP-th test among all the tests\&. \fCi\fP can range from 0 to \fCtotal_test_count() - 1\fP\&. If \fCi\fP is not in that range, returns \fCNULL\fP\&.
.SS "ad_hoc_test_result {#TestSuite::ad_hoc_test_result}"
\fCconst TestResult& TestSuite::ad_hoc_test_result() const\fP
.PP
Returns the \fC\fCTestResult\fP\fP that holds test properties recorded during execution of \fCSetUpTestSuite\fP and \fCTearDownTestSuite\fP\&.
.SS "TestInfo"
\fC\fBtesting::TestInfo\fP\fP
.PP
Stores information about a test\&.
.SS "Public Methods"
.SS "test_suite_name {#TestInfo::test_suite_name}"
\fCconst char* TestInfo::test_suite_name() const\fP
.PP
Returns the test suite name\&.
.SS "name {#TestInfo::name}"
\fCconst char* TestInfo::name() const\fP
.PP
Returns the test name\&.
.SS "type_param {#TestInfo::type_param}"
\fCconst char* TestInfo::type_param() const\fP
.PP
Returns the name of the parameter type, or \fCNULL\fP if this is not a typed or type-parameterized test\&. See \fCTyped Tests\fP and \fCType-Parameterized Tests\fP\&.
.SS "value_param {#TestInfo::value_param}"
\fCconst char* TestInfo::value_param() const\fP
.PP
Returns the text representation of the value parameter, or \fCNULL\fP if this is not a value-parameterized test\&. See \fCValue-Parameterized Tests\fP\&.
.SS "file {#TestInfo::file}"
\fCconst char* TestInfo::file() const\fP
.PP
Returns the file name where this test is defined\&.
.SS "line {#TestInfo::line}"
\fCint TestInfo::line() const\fP
.PP
Returns the line where this test is defined\&.
.SS "is_in_another_shard {#TestInfo::is_in_another_shard}"
\fCbool TestInfo::is_in_another_shard() const\fP
.PP
Returns true if this test should not be run because it's in another shard\&.
.SS "should_run {#TestInfo::should_run}"
\fCbool TestInfo::should_run() const\fP
.PP
Returns true if this test should run, that is if the test is not disabled (or it is disabled but the \fCalso_run_disabled_tests\fP flag has been specified) and its full name matches the user-specified filter\&.
.PP
GoogleTest allows the user to filter the tests by their full names\&. Only the tests that match the filter will run\&. See \fCRunning a Subset of the Tests\fP for more information\&.
.SS "is_reportable {#TestInfo::is_reportable}"
\fCbool TestInfo::is_reportable() const\fP
.PP
Returns true if and only if this test will appear in the XML report\&.
.SS "result {#TestInfo::result}"
\fCconst TestResult* TestInfo::result() const\fP
.PP
Returns the result of the test\&. See \fC\fCTestResult\fP\fP\&.
.SS "TestParamInfo"
\fC\fBtesting::TestParamInfo\fP<T>\fP
.PP
Describes a parameter to a value-parameterized test\&. The type \fCT\fP is the type of the parameter\&.
.PP
Contains the fields \fCparam\fP and \fCindex\fP which hold the value of the parameter and its integer index respectively\&.
.SS "UnitTest"
\fC\fBtesting::UnitTest\fP\fP
.PP
This class contains information about the test program\&.
.PP
\fCUnitTest\fP is a singleton class\&. The only instance is created when \fCUnitTest::GetInstance()\fP is first called\&. This instance is never deleted\&.
.PP
\fCUnitTest\fP is not copyable\&.
.SS "Public Methods"
.SS "GetInstance {#UnitTest::GetInstance}"
\fCstatic UnitTest* UnitTest::GetInstance()\fP
.PP
Gets the singleton \fCUnitTest\fP object\&. The first time this method is called, a \fCUnitTest\fP object is constructed and returned\&. Consecutive calls will return the same object\&.
.SS "original_working_dir {#UnitTest::original_working_dir}"
\fCconst char* UnitTest::original_working_dir() const\fP
.PP
Returns the working directory when the first \fC\fCTEST()\fP\fP or \fC\fCTEST_F()\fP\fP was executed\&. The \fCUnitTest\fP object owns the string\&.
.SS "current_test_suite {#UnitTest::current_test_suite}"
\fCconst TestSuite* UnitTest::current_test_suite() const\fP
.PP
Returns the \fC\fCTestSuite\fP\fP object for the test that's currently running, or \fCNULL\fP if no test is running\&.
.SS "current_test_info {#UnitTest::current_test_info}"
\fCconst TestInfo* UnitTest::current_test_info() const\fP
.PP
Returns the \fC\fCTestInfo\fP\fP object for the test that's currently running, or \fCNULL\fP if no test is running\&.
.SS "random_seed {#UnitTest::random_seed}"
\fCint UnitTest::random_seed() const\fP
.PP
Returns the random seed used at the start of the current test run\&.
.SS "successful_test_suite_count {#UnitTest::successful_test_suite_count}"
\fCint UnitTest::successful_test_suite_count() const\fP
.PP
Gets the number of successful test suites\&.
.SS "failed_test_suite_count {#UnitTest::failed_test_suite_count}"
\fCint UnitTest::failed_test_suite_count() const\fP
.PP
Gets the number of failed test suites\&.
.SS "total_test_suite_count {#UnitTest::total_test_suite_count}"
\fCint UnitTest::total_test_suite_count() const\fP
.PP
Gets the number of all test suites\&.
.SS "test_suite_to_run_count {#UnitTest::test_suite_to_run_count}"
\fCint UnitTest::test_suite_to_run_count() const\fP
.PP
Gets the number of all test suites that contain at least one test that should run\&.
.SS "successful_test_count {#UnitTest::successful_test_count}"
\fCint UnitTest::successful_test_count() const\fP
.PP
Gets the number of successful tests\&.
.SS "skipped_test_count {#UnitTest::skipped_test_count}"
\fCint UnitTest::skipped_test_count() const\fP
.PP
Gets the number of skipped tests\&.
.SS "failed_test_count {#UnitTest::failed_test_count}"
\fCint UnitTest::failed_test_count() const\fP
.PP
Gets the number of failed tests\&.
.SS "reportable_disabled_test_count {#UnitTest::reportable_disabled_test_count}"
\fCint UnitTest::reportable_disabled_test_count() const\fP
.PP
Gets the number of disabled tests that will be reported in the XML report\&.
.SS "disabled_test_count {#UnitTest::disabled_test_count}"
\fCint UnitTest::disabled_test_count() const\fP
.PP
Gets the number of disabled tests\&.
.SS "reportable_test_count {#UnitTest::reportable_test_count}"
\fCint UnitTest::reportable_test_count() const\fP
.PP
Gets the number of tests to be printed in the XML report\&.
.SS "total_test_count {#UnitTest::total_test_count}"
\fCint UnitTest::total_test_count() const\fP
.PP
Gets the number of all tests\&.
.SS "test_to_run_count {#UnitTest::test_to_run_count}"
\fCint UnitTest::test_to_run_count() const\fP
.PP
Gets the number of tests that should run\&.
.SS "start_timestamp {#UnitTest::start_timestamp}"
\fCTimeInMillis UnitTest::start_timestamp() const\fP
.PP
Gets the time of the test program start, in ms from the start of the UNIX epoch\&.
.SS "elapsed_time {#UnitTest::elapsed_time}"
\fCTimeInMillis UnitTest::elapsed_time() const\fP
.PP
Gets the elapsed time, in milliseconds\&.
.SS "Passed {#UnitTest::Passed}"
\fCbool UnitTest::Passed() const\fP
.PP
Returns true if and only if the unit test passed (i\&.e\&. all test suites passed)\&.
.SS "Failed {#UnitTest::Failed}"
\fCbool UnitTest::Failed() const\fP
.PP
Returns true if and only if the unit test failed (i\&.e\&. some test suite failed or something outside of all tests failed)\&.
.SS "GetTestSuite {#UnitTest::GetTestSuite}"
\fCconst TestSuite* UnitTest::GetTestSuite(int i) const\fP
.PP
Gets the \fC\fCTestSuite\fP\fP object for the \fCi\fP-th test suite among all the test suites\&. \fCi\fP can range from 0 to \fCtotal_test_suite_count() - 1\fP\&. If \fCi\fP is not in that range, returns \fCNULL\fP\&.
.SS "ad_hoc_test_result {#UnitTest::ad_hoc_test_result}"
\fCconst TestResult& UnitTest::ad_hoc_test_result() const\fP
.PP
Returns the \fC\fCTestResult\fP\fP containing information on test failures and properties logged outside of individual test suites\&.
.SS "listeners {#UnitTest::listeners}"
\fCTestEventListeners& UnitTest::listeners()\fP
.PP
Returns the list of event listeners that can be used to track events inside GoogleTest\&. See \fC\fCTestEventListeners\fP\fP\&.
.SS "TestEventListener"
\fC\fBtesting::TestEventListener\fP\fP
.PP
The interface for tracing execution of tests\&. The methods below are listed in the order the corresponding events are fired\&.
.SS "Public Methods"
.SS "OnTestProgramStart {#TestEventListener::OnTestProgramStart}"
\fCvirtual void TestEventListener::OnTestProgramStart(const UnitTest& unit_test)\fP
.PP
Fired before any test activity starts\&.
.SS "OnTestIterationStart {#TestEventListener::OnTestIterationStart}"
\fCvirtual void TestEventListener::OnTestIterationStart(const UnitTest& unit_test, int iteration)\fP
.PP
Fired before each iteration of tests starts\&. There may be more than one iteration if \fC\fBGTEST_FLAG(repeat)\fP\fP is set\&. \fCiteration\fP is the iteration index, starting from 0\&.
.SS "OnEnvironmentsSetUpStart {#TestEventListener::OnEnvironmentsSetUpStart}"
\fCvirtual void TestEventListener::OnEnvironmentsSetUpStart(const UnitTest& unit_test)\fP
.PP
Fired before environment set-up for each iteration of tests starts\&.
.SS "OnEnvironmentsSetUpEnd {#TestEventListener::OnEnvironmentsSetUpEnd}"
\fCvirtual void TestEventListener::OnEnvironmentsSetUpEnd(const UnitTest& unit_test)\fP
.PP
Fired after environment set-up for each iteration of tests ends\&.
.SS "OnTestSuiteStart {#TestEventListener::OnTestSuiteStart}"
\fCvirtual void TestEventListener::OnTestSuiteStart(const TestSuite& test_suite)\fP
.PP
Fired before the test suite starts\&.
.SS "OnTestStart {#TestEventListener::OnTestStart}"
\fCvirtual void TestEventListener::OnTestStart(const TestInfo& test_info)\fP
.PP
Fired before the test starts\&.
.SS "OnTestPartResult {#TestEventListener::OnTestPartResult}"
\fCvirtual void TestEventListener::OnTestPartResult(const TestPartResult& test_part_result)\fP
.PP
Fired after a failed assertion or a \fC\fBSUCCEED()\fP\fP invocation\&. If you want to throw an exception from this function to skip to the next test, it must be an \fC\fCAssertionException\fP\fP or inherited from it\&.
.SS "OnTestEnd {#TestEventListener::OnTestEnd}"
\fCvirtual void TestEventListener::OnTestEnd(const TestInfo& test_info)\fP
.PP
Fired after the test ends\&.
.SS "OnTestSuiteEnd {#TestEventListener::OnTestSuiteEnd}"
\fCvirtual void TestEventListener::OnTestSuiteEnd(const TestSuite& test_suite)\fP
.PP
Fired after the test suite ends\&.
.SS "OnEnvironmentsTearDownStart {#TestEventListener::OnEnvironmentsTearDownStart}"
\fCvirtual void TestEventListener::OnEnvironmentsTearDownStart(const UnitTest& unit_test)\fP
.PP
Fired before environment tear-down for each iteration of tests starts\&.
.SS "OnEnvironmentsTearDownEnd {#TestEventListener::OnEnvironmentsTearDownEnd}"
\fCvirtual void TestEventListener::OnEnvironmentsTearDownEnd(const UnitTest& unit_test)\fP
.PP
Fired after environment tear-down for each iteration of tests ends\&.
.SS "OnTestIterationEnd {#TestEventListener::OnTestIterationEnd}"
\fCvirtual void TestEventListener::OnTestIterationEnd(const UnitTest& unit_test, int iteration)\fP
.PP
Fired after each iteration of tests finishes\&.
.SS "OnTestProgramEnd {#TestEventListener::OnTestProgramEnd}"
\fCvirtual void TestEventListener::OnTestProgramEnd(const UnitTest& unit_test)\fP
.PP
Fired after all test activities have ended\&.
.SS "TestEventListeners"
\fC\fBtesting::TestEventListeners\fP\fP
.PP
Lets users add listeners to track events in GoogleTest\&.
.SS "Public Methods"
.SS "Append {#TestEventListeners::Append}"
\fCvoid TestEventListeners::Append(TestEventListener* listener)\fP
.PP
Appends an event listener to the end of the list\&. GoogleTest assumes ownership of the listener (i\&.e\&. it will delete the listener when the test program finishes)\&.
.SS "Release {#TestEventListeners::Release}"
\fCTestEventListener* TestEventListeners::Release(TestEventListener* listener)\fP
.PP
Removes the given event listener from the list and returns it\&. It then becomes the caller's responsibility to delete the listener\&. Returns \fCNULL\fP if the listener is not found in the list\&.
.SS "default_result_printer {#TestEventListeners::default_result_printer}"
\fCTestEventListener* TestEventListeners::default_result_printer() const\fP
.PP
Returns the standard listener responsible for the default console output\&. Can be removed from the listeners list to shut down default console output\&. Note that removing this object from the listener list with \fC\fCRelease()\fP\fP transfers its ownership to the caller and makes this function return \fCNULL\fP the next time\&.
.SS "default_xml_generator {#TestEventListeners::default_xml_generator}"
\fCTestEventListener* TestEventListeners::default_xml_generator() const\fP
.PP
Returns the standard listener responsible for the default XML output controlled by the \fC--gtest_output=xml\fP flag\&. Can be removed from the listeners list by users who want to shut down the default XML output controlled by this flag and substitute it with custom one\&. Note that removing this object from the listener list with \fC\fCRelease()\fP\fP transfers its ownership to the caller and makes this function return \fCNULL\fP the next time\&.
.SS "TestPartResult"
\fCtesting::TestPartResult\fP
.PP
A copyable object representing the result of a test part (i\&.e\&. an assertion or an explicit \fC\fBFAIL()\fP\fP, \fC\fBADD_FAILURE()\fP\fP, or \fCSUCCESS()\fP)\&.
.SS "Public Methods"
.SS "type {#TestPartResult::type}"
\fCType TestPartResult::type() const\fP
.PP
Gets the outcome of the test part\&.
.PP
The return type \fCType\fP is an enum defined as follows:
.PP
.PP
.nf
enum Type {
  kSuccess,          // Succeeded\&.
  kNonFatalFailure,  // Failed but the test can continue\&.
  kFatalFailure,     // Failed and the test should be terminated\&.
  kSkip              // Skipped\&.
};
.fi
.PP
.SS "file_name {#TestPartResult::file_name}"
\fCconst char* TestPartResult::file_name() const\fP
.PP
Gets the name of the source file where the test part took place, or \fCNULL\fP if it's unknown\&.
.SS "line_number {#TestPartResult::line_number}"
\fCint TestPartResult::line_number() const\fP
.PP
Gets the line in the source file where the test part took place, or \fC-1\fP if it's unknown\&.
.SS "summary {#TestPartResult::summary}"
\fCconst char* TestPartResult::summary() const\fP
.PP
Gets the summary of the failure message\&.
.SS "message {#TestPartResult::message}"
\fCconst char* TestPartResult::message() const\fP
.PP
Gets the message associated with the test part\&.
.SS "skipped {#TestPartResult::skipped}"
\fCbool TestPartResult::skipped() const\fP
.PP
Returns true if and only if the test part was skipped\&.
.SS "passed {#TestPartResult::passed}"
\fCbool TestPartResult::passed() const\fP
.PP
Returns true if and only if the test part passed\&.
.SS "nonfatally_failed {#TestPartResult::nonfatally_failed}"
\fCbool TestPartResult::nonfatally_failed() const\fP
.PP
Returns true if and only if the test part non-fatally failed\&.
.SS "fatally_failed {#TestPartResult::fatally_failed}"
\fCbool TestPartResult::fatally_failed() const\fP
.PP
Returns true if and only if the test part fatally failed\&.
.SS "failed {#TestPartResult::failed}"
\fCbool TestPartResult::failed() const\fP
.PP
Returns true if and only if the test part failed\&.
.SS "TestProperty"
\fC\fBtesting::TestProperty\fP\fP
.PP
A copyable object representing a user-specified test property which can be output as a key/value string pair\&.
.SS "Public Methods"
.SS "key"
\fCconst char* key() const\fP
.PP
Gets the user-supplied key\&.
.SS "value"
\fCconst char* value() const\fP
.PP
Gets the user-supplied value\&.
.SS "SetValue"
\fCvoid SetValue(const std::string& new_value)\fP
.PP
Sets a new value, overriding the previous one\&.
.SS "TestResult"
\fC\fBtesting::TestResult\fP\fP
.PP
Contains information about the result of a single test\&.
.PP
\fCTestResult\fP is not copyable\&.
.SS "Public Methods"
.SS "total_part_count {#TestResult::total_part_count}"
\fCint TestResult::total_part_count() const\fP
.PP
Gets the number of all test parts\&. This is the sum of the number of successful test parts and the number of failed test parts\&.
.SS "test_property_count {#TestResult::test_property_count}"
\fCint TestResult::test_property_count() const\fP
.PP
Returns the number of test properties\&.
.SS "Passed {#TestResult::Passed}"
\fCbool TestResult::Passed() const\fP
.PP
Returns true if and only if the test passed (i\&.e\&. no test part failed)\&.
.SS "Skipped {#TestResult::Skipped}"
\fCbool TestResult::Skipped() const\fP
.PP
Returns true if and only if the test was skipped\&.
.SS "Failed {#TestResult::Failed}"
\fCbool TestResult::Failed() const\fP
.PP
Returns true if and only if the test failed\&.
.SS "HasFatalFailure {#TestResult::HasFatalFailure}"
\fCbool TestResult::HasFatalFailure() const\fP
.PP
Returns true if and only if the test fatally failed\&.
.SS "HasNonfatalFailure {#TestResult::HasNonfatalFailure}"
\fCbool TestResult::HasNonfatalFailure() const\fP
.PP
Returns true if and only if the test has a non-fatal failure\&.
.SS "elapsed_time {#TestResult::elapsed_time}"
\fCTimeInMillis TestResult::elapsed_time() const\fP
.PP
Returns the elapsed time, in milliseconds\&.
.SS "start_timestamp {#TestResult::start_timestamp}"
\fCTimeInMillis TestResult::start_timestamp() const\fP
.PP
Gets the time of the test case start, in ms from the start of the UNIX epoch\&.
.SS "GetTestPartResult {#TestResult::GetTestPartResult}"
\fCconst TestPartResult& TestResult::GetTestPartResult(int i) const\fP
.PP
Returns the \fC\fCTestPartResult\fP\fP for the \fCi\fP-th test part result among all the results\&. \fCi\fP can range from 0 to \fCtotal_part_count() - 1\fP\&. If \fCi\fP is not in that range, aborts the program\&.
.SS "GetTestProperty {#TestResult::GetTestProperty}"
\fCconst TestProperty& TestResult::GetTestProperty(int i) const\fP
.PP
Returns the \fC\fCTestProperty\fP\fP object for the \fCi\fP-th test property\&. \fCi\fP can range from 0 to \fCtest_property_count() - 1\fP\&. If \fCi\fP is not in that range, aborts the program\&.
.SS "TimeInMillis"
\fC\fBtesting::TimeInMillis\fP\fP
.PP
An integer type representing time in milliseconds\&.
.SS "Types"
\fC\fBtesting::Types\fP<T\&.\&.\&.>\fP
.PP
Represents a list of types for use in typed tests and type-parameterized tests\&.
.PP
The template argument \fCT\&.\&.\&.\fP can be any number of types, for example:
.PP
.PP
.nf
testing::Types<char, int, unsigned int>
.fi
.PP
.PP
See \fCTyped Tests\fP and \fCType-Parameterized Tests\fP for more information\&.
.SS "WithParamInterface"
\fC\fBtesting::WithParamInterface\fP<T>\fP
.PP
The pure interface class that all value-parameterized tests inherit from\&.
.PP
A value-parameterized test fixture class must inherit from both \fC\fCTest\fP\fP and \fCWithParamInterface\fP\&. In most cases that just means inheriting from \fC\fCTestWithParam\fP\fP, but more complicated test hierarchies may need to inherit from \fCTest\fP and \fCWithParamInterface\fP at different levels\&.
.PP
This interface defines the type alias \fCParamType\fP for the parameter type \fCT\fP and has support for accessing the test parameter value via the \fCGetParam()\fP method:
.PP
.PP
.nf
static const ParamType& GetParam()
.fi
.PP
.PP
For more information, see \fCValue-Parameterized Tests\fP\&.
.SH "Functions"
.PP
GoogleTest defines the following functions to help with writing and running tests\&.
.SS "InitGoogleTest"
\fCvoid \fBtesting::InitGoogleTest(int* argc, char** argv)\fP\fP \\ \fCvoid \fBtesting::InitGoogleTest(int* argc, wchar_t** argv)\fP\fP \\ \fCvoid \fBtesting::InitGoogleTest()\fP\fP
.PP
Initializes GoogleTest\&. This must be called before calling \fC\fCRUN_ALL_TESTS()\fP\fP\&. In particular, it parses the command line for the flags that GoogleTest recognizes\&. Whenever a GoogleTest flag is seen, it is removed from \fCargv\fP, and \fC*argc\fP is decremented\&.
.PP
No value is returned\&. Instead, the GoogleTest flag variables are updated\&.
.PP
The \fCInitGoogleTest(int* argc, wchar_t** argv)\fP overload can be used in Windows programs compiled in \fCUNICODE\fP mode\&.
.PP
The argument-less \fC\fBInitGoogleTest()\fP\fP overload can be used on Arduino/embedded platforms where there is no \fCargc\fP/\fCargv\fP\&.
.SS "AddGlobalTestEnvironment"
\fCEnvironment* \fBtesting::AddGlobalTestEnvironment(Environment* env)\fP\fP
.PP
Adds a test environment to the test program\&. Must be called before \fC\fCRUN_ALL_TESTS()\fP\fP is called\&. See \fCGlobal Set-Up and Tear-Down\fP for more information\&.
.PP
See also \fC\fCEnvironment\fP\fP\&.
.SS "RegisterTest"
.PP
.nf
template <typename Factory>
TestInfo* testing::RegisterTest(const char* test_suite_name, const char* test_name,
                                  const char* type_param, const char* value_param,
                                  const char* file, int line, Factory factory)
.fi
.PP
.PP
Dynamically registers a test with the framework\&.
.PP
The \fCfactory\fP argument is a factory callable (move-constructible) object or function pointer that creates a new instance of the \fCTest\fP object\&. It handles ownership to the caller\&. The signature of the callable is \fCFixture*()\fP, where \fC\fBFixture\fP\fP is the test fixture class for the test\&. All tests registered with the same \fCtest_suite_name\fP must return the same fixture type\&. This is checked at runtime\&.
.PP
The framework will infer the fixture class from the factory and will call the \fCSetUpTestSuite\fP and \fCTearDownTestSuite\fP methods for it\&.
.PP
Must be called before \fC\fCRUN_ALL_TESTS()\fP\fP is invoked, otherwise behavior is undefined\&.
.PP
See \fCRegistering tests programmatically\fP for more information\&.
.SS "RUN_ALL_TESTS"
\fCint \fBRUN_ALL_TESTS()\fP\fP
.PP
Use this function in \fC\fBmain()\fP\fP to run all tests\&. It returns \fC0\fP if all tests are successful, or \fC1\fP otherwise\&.
.PP
\fC\fBRUN_ALL_TESTS()\fP\fP should be invoked after the command line has been parsed by \fC\fCInitGoogleTest()\fP\fP\&.
.PP
This function was formerly a macro; thus, it is in the global namespace and has an all-caps name\&.
.SS "AssertionSuccess"
\fCAssertionResult \fBtesting::AssertionSuccess()\fP\fP
.PP
Creates a successful assertion result\&. See \fC\fCAssertionResult\fP\fP\&.
.SS "AssertionFailure"
\fCAssertionResult \fBtesting::AssertionFailure()\fP\fP
.PP
Creates a failed assertion result\&. Use the \fC<<\fP operator to store a failure message:
.PP
.PP
.nf
testing::AssertionFailure() << "My failure message";
.fi
.PP
.PP
See \fC\fCAssertionResult\fP\fP\&.
.SS "StaticAssertTypeEq"
\fC\fBtesting::StaticAssertTypeEq\fP<T1, T2>()\fP
.PP
Compile-time assertion for type equality\&. Compiles if and only if \fCT1\fP and \fCT2\fP are the same type\&. The value it returns is irrelevant\&.
.PP
See \fCType Assertions\fP for more information\&.
.SS "PrintToString"
\fCstd::string testing::PrintToString(x)\fP
.PP
Prints any value \fCx\fP using GoogleTest's value printer\&.
.PP
See \fCTeaching GoogleTest How to Print Your Values\fP for more information\&.
.SS "PrintToStringParamName"
\fCstd::string \fBtesting::PrintToStringParamName\fP(TestParamInfo<T>& info)\fP
.PP
A built-in parameterized test name generator which returns the result of \fC\fCPrintToString\fP\fP called on \fCinfo\&.param\fP\&. Does not work when the test parameter is a \fCstd::string\fP or C string\&. See \fCSpecifying Names for Value-Parameterized Test Parameters\fP for more information\&.
.PP
See also \fC\fCTestParamInfo\fP\fP and \fC\fCINSTANTIATE_TEST_SUITE_P\fP\fP\&. 
