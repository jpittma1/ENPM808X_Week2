.TH "md_build__deps_googletest_src_docs_quickstart_bazel" 3 "Tue Sep 12 2023" "Week2" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_build__deps_googletest_src_docs_quickstart_bazel \- Quickstart: Building with Bazel 
This tutorial aims to get you up and running with GoogleTest using the Bazel build system\&. If you're using GoogleTest for the first time or need a refresher, we recommend this tutorial as a starting point\&.
.SH "Prerequisites"
.PP
To complete this tutorial, you'll need:
.PP
.IP "\(bu" 2
A compatible operating system (e\&.g\&. Linux, macOS, Windows)\&.
.IP "\(bu" 2
A compatible C++ compiler that supports at least C++14\&.
.IP "\(bu" 2
\fCBazel\fP, the preferred build system used by the GoogleTest team\&.
.PP
.PP
See \fBSupported Platforms\fP for more information about platforms compatible with GoogleTest\&.
.PP
If you don't already have Bazel installed, see the \fCBazel installation guide\fP\&.
.PP
{: \&.callout \&.note} Note: The terminal commands in this tutorial show a Unix shell prompt, but the commands work on the Windows command line as well\&.
.SH "Set up a Bazel workspace"
.PP
A \fCBazel workspace\fP is a directory on your filesystem that you use to manage source files for the software you want to build\&. Each workspace directory has a text file named \fCWORKSPACE\fP which may be empty, or may contain references to external dependencies required to build the outputs\&.
.PP
First, create a directory for your workspace:
.PP
.PP
.nf
$ mkdir my_workspace && cd my_workspace
.fi
.PP
.PP
Next, youâ€™ll create the \fCWORKSPACE\fP file to specify dependencies\&. A common and recommended way to depend on GoogleTest is to use a \fCBazel external dependency\fP via the \fC\fChttp_archive\fP rule\fP\&. To do this, in the root directory of your workspace (\fCmy_workspace/\fP), create a file named \fCWORKSPACE\fP with the following contents:
.PP
.PP
.nf
load("@bazel_tools//tools/build_defs/repo:http\&.bzl", "http_archive")

http_archive(
  name = "com_google_googletest",
  urls = ["https://github\&.com/google/googletest/archive/5ab508a01f9eb089207ee87fd547d290da39d015\&.zip"],
  strip_prefix = "googletest-5ab508a01f9eb089207ee87fd547d290da39d015",
)
.fi
.PP
.PP
The above configuration declares a dependency on GoogleTest which is downloaded as a ZIP archive from GitHub\&. In the above example, \fC5ab508a01f9eb089207ee87fd547d290da39d015\fP is the Git commit hash of the GoogleTest version to use; we recommend updating the hash often to point to the latest version\&. Use a recent hash on the \fCmain\fP branch\&.
.PP
Now you're ready to build C++ code that uses GoogleTest\&.
.SH "Create and run a binary"
.PP
With your Bazel workspace set up, you can now use GoogleTest code within your own project\&.
.PP
As an example, create a file named \fChello_test\&.cc\fP in your \fCmy_workspace\fP directory with the following contents:
.PP
.PP
.nf
#include <gtest/gtest\&.h>

// Demonstrate some basic assertions\&.
TEST(HelloTest, BasicAssertions) {
  // Expect two strings not to be equal\&.
  EXPECT_STRNE("hello", "world");
  // Expect equality\&.
  EXPECT_EQ(7 * 6, 42);
}
.fi
.PP
.PP
GoogleTest provides \fCassertions\fP that you use to test the behavior of your code\&. The above sample includes the main GoogleTest header file and demonstrates some basic assertions\&.
.PP
To build the code, create a file named \fCBUILD\fP in the same directory with the following contents:
.PP
.PP
.nf
cc_test(
  name = "hello_test",
  size = "small",
  srcs = ["hello_test\&.cc"],
  deps = ["@com_google_googletest//:gtest_main"],
)
.fi
.PP
.PP
This \fCcc_test\fP rule declares the C++ test binary you want to build, and links to GoogleTest (\fC//:gtest_main\fP) using the prefix you specified in the \fCWORKSPACE\fP file (\fC@com_google_googletest\fP)\&. For more information about Bazel \fCBUILD\fP files, see the \fCBazel C++ Tutorial\fP\&.
.PP
{: \&.callout \&.note} NOTE: In the example below, we assume Clang or GCC and set \fC--cxxopt=-std=c++14\fP to ensure that GoogleTest is compiled as C++14 instead of the compiler's default setting (which could be C++11)\&. For MSVC, the equivalent would be \fC--cxxopt=/std:c++14\fP\&. See \fBSupported Platforms\fP for more details on supported language versions\&.
.PP
Now you can build and run your test:
.PP
.PP
.nf

\fBmy_workspace$ bazel test --cxxopt=-std=c++14 --test_output=all //:hello_test\fP
INFO: Analyzed target //:hello_test (26 packages loaded, 362 targets configured)\&.
INFO: Found 1 test target\&.\&.\&.
INFO: From Testing //:hello_test:
==================== Test output for //:hello_test:
Running \fBmain()\fP from \fBgmock_main\&.cc\fP
[==========] Running 1 test from 1 test suite\&.
[----------] Global test environment set-up\&.
[----------] 1 test from HelloTest
[ RUN      ] HelloTest\&.BasicAssertions
[       OK ] HelloTest\&.BasicAssertions (0 ms)
[----------] 1 test from HelloTest (0 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran\&. (0 ms total)
[  PASSED  ] 1 test\&.
================================================================================
Target //:hello_test up-to-date:
  bazel-bin/hello_test
INFO: Elapsed time: 4\&.190s, Critical Path: 3\&.05s
INFO: 27 processes: 8 internal, 19 linux-sandbox\&.
INFO: Build completed successfully, 27 total actions
//:hello_test                                                     PASSED in 0\&.1s

INFO: Build completed successfully, 27 total actions
.fi
.PP
.PP
Congratulations! You've successfully built and run a test binary using GoogleTest\&.
.SH "Next steps"
.PP
.IP "\(bu" 2
\fBCheck out the Primer\fP to start learning how to write simple tests\&.
.IP "\(bu" 2
\fBSee the code samples\fP for more examples showing how to use a variety of GoogleTest features\&. 
.PP

