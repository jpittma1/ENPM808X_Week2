.TH "md_build__deps_googletest_src_docs_reference_mocking" 3 "Tue Sep 12 2023" "Week2" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_build__deps_googletest_src_docs_reference_mocking \- Mocking Reference 
This page lists the facilities provided by GoogleTest for creating and working with mock objects\&. To use them, include the header \fC\fBgmock/gmock\&.h\fP\fP\&.
.SH "Macros"
.PP
GoogleTest defines the following macros for working with mocks\&.
.SS "MOCK_METHOD"
\fCMOCK_METHOD(\fP*\fCreturn_type\fP*\fC,\fP*\fCmethod_name\fP*\fC, (\fP*\fCargs\&.\&.\&.\fP*\fC));\fP \\ \fCMOCK_METHOD(\fP*\fCreturn_type\fP*\fC,\fP*\fCmethod_name\fP*\fC, (\fP*\fCargs\&.\&.\&.\fP*\fC), (\fP*\fCspecs\&.\&.\&.\fP*\fC));\fP
.PP
Defines a mock method *\fCmethod_name\fP* with arguments \fC(\fP*\fCargs\&.\&.\&.\fP*\fC)\fP and return type *\fCreturn_type\fP* within a mock class\&.
.PP
The parameters of \fCMOCK_METHOD\fP mirror the method declaration\&. The optional fourth parameter *\fCspecs\&.\&.\&.\fP* is a comma-separated list of qualifiers\&. The following qualifiers are accepted:
.PP
Qualifier   Meaning    \fCconst\fP   Makes the mocked method a \fCconst\fP method\&. Required if overriding a \fCconst\fP method\&.    \fCoverride\fP   Marks the method with \fCoverride\fP\&. Recommended if overriding a \fCvirtual\fP method\&.    \fCnoexcept\fP   Marks the method with \fCnoexcept\fP\&. Required if overriding a \fCnoexcept\fP method\&.    \fCCalltype(\fP*\fCcalltype\fP*\fC)\fP   Sets the call type for the method, for example \fCCalltype(STDMETHODCALLTYPE)\fP\&. Useful on Windows\&.    \fCref(\fP*\fCqualifier\fP*\fC)\fP   Marks the method with the given reference qualifier, for example \fCref(&)\fP or \fCref(&&)\fP\&. Required if overriding a method that has a reference qualifier\&.   
.PP
Note that commas in arguments prevent \fCMOCK_METHOD\fP from parsing the arguments correctly if they are not appropriately surrounded by parentheses\&. See the following example:
.PP
.PP
.nf
class MyMock {
 public:
  // The following 2 lines will not compile due to commas in the arguments:
  MOCK_METHOD(std::pair<bool, int>, GetPair, ());              // Error!
  MOCK_METHOD(bool, CheckMap, (std::map<int, double>, bool));  // Error!

  // One solution - wrap arguments that contain commas in parentheses:
  MOCK_METHOD((std::pair<bool, int>), GetPair, ());
  MOCK_METHOD(bool, CheckMap, ((std::map<int, double>), bool));

  // Another solution - use type aliases:
  using BoolAndInt = std::pair<bool, int>;
  MOCK_METHOD(BoolAndInt, GetPair, ());
  using MapIntDouble = std::map<int, double>;
  MOCK_METHOD(bool, CheckMap, (MapIntDouble, bool));
};
.fi
.PP
.PP
\fCMOCK_METHOD\fP must be used in the \fCpublic:\fP section of a mock class definition, regardless of whether the method being mocked is \fCpublic\fP, \fCprotected\fP, or \fCprivate\fP in the base class\&.
.SS "EXPECT_CALL"
\fCEXPECT_CALL(\fP*\fCmock_object\fP*\fC,\fP*\fCmethod_name\fP*\fC(\fP*\fCmatchers\&.\&.\&.\fP*\fC))\fP
.PP
Creates an \fCexpectation\fP that the method *\fCmethod_name\fP* of the object *\fCmock_object\fP* is called with arguments that match the given matchers *\fCmatchers\&.\&.\&.\fP*\&. \fCEXPECT_CALL\fP must precede any code that exercises the mock object\&.
.PP
The parameter *\fCmatchers\&.\&.\&.\fP* is a comma-separated list of \fCmatchers\fP that correspond to each argument of the method *\fCmethod_name\fP*\&. The expectation will apply only to calls of *\fCmethod_name\fP* whose arguments match all of the matchers\&. If \fC(\fP*\fCmatchers\&.\&.\&.\fP*\fC)\fP is omitted, the expectation behaves as if each argument's matcher were a \fCwildcard matcher (\fC_\fP)\fP\&. See the \fBMatchers Reference\fP for a list of all built-in matchers\&.
.PP
The following chainable clauses can be used to modify the expectation, and they must be used in the following order:
.PP
.PP
.nf
EXPECT_CALL(mock_object, method_name(matchers\&.\&.\&.))
    \&.With(multi_argument_matcher)  // Can be used at most once
    \&.Times(cardinality)            // Can be used at most once
    \&.InSequence(sequences\&.\&.\&.)      // Can be used any number of times
    \&.After(expectations\&.\&.\&.)        // Can be used any number of times
    \&.WillOnce(action)              // Can be used any number of times
    \&.WillRepeatedly(action)        // Can be used at most once
    \&.RetiresOnSaturation();        // Can be used at most once
.fi
.PP
.PP
See details for each modifier clause below\&.
.SS "With {#EXPECT_CALL\&.With}"
\fC\&.With(\fP*\fCmulti_argument_matcher\fP*\fC)\fP
.PP
Restricts the expectation to apply only to mock function calls whose arguments as a whole match the multi-argument matcher *\fCmulti_argument_matcher\fP*\&.
.PP
GoogleTest passes all of the arguments as one tuple into the matcher\&. The parameter *\fCmulti_argument_matcher\fP* must thus be a matcher of type \fCMatcher<std::tuple<A1, \&.\&.\&., An>>\fP, where \fCA1, \&.\&.\&., An\fP are the types of the function arguments\&.
.PP
For example, the following code sets the expectation that \fCmy_mock\&.SetPosition()\fP is called with any two arguments, the first argument being less than the second:
.PP
.PP
.nf
using ::testing::_;
using ::testing::Lt;
\&.\&.\&.
EXPECT_CALL(my_mock, SetPosition(_, _))
    \&.With(Lt());
.fi
.PP
.PP
GoogleTest provides some built-in matchers for 2-tuples, including the \fCLt()\fP matcher above\&. See \fCMulti-argument Matchers\fP\&.
.PP
The \fCWith\fP clause can be used at most once on an expectation and must be the first clause\&.
.SS "Times {#EXPECT_CALL\&.Times}"
\fC\&.Times(\fP*\fCcardinality\fP*\fC)\fP
.PP
Specifies how many times the mock function call is expected\&.
.PP
The parameter *\fCcardinality\fP* represents the number of expected calls and can be one of the following, all defined in the \fC\fBtesting\fP\fP namespace:
.PP
Cardinality   Meaning    \fC\fBAnyNumber()\fP\fP   The function can be called any number of times\&.    \fCAtLeast(n)\fP   The function call is expected at least \fIn\fP times\&.    \fCAtMost(n)\fP   The function call is expected at most \fIn\fP times\&.    \fCBetween(m, n)\fP   The function call is expected between \fIm\fP and \fIn\fP times, inclusive\&.    \fCExactly(n)\fP or \fCn\fP   The function call is expected exactly \fIn\fP times\&. If \fIn\fP is 0, the call should never happen\&.   
.PP
If the \fCTimes\fP clause is omitted, GoogleTest infers the cardinality as follows:
.PP
.IP "\(bu" 2
If neither \fC\fCWillOnce\fP\fP nor \fC\fCWillRepeatedly\fP\fP are specified, the inferred cardinality is \fCTimes(1)\fP\&.
.IP "\(bu" 2
If there are \fIn\fP \fCWillOnce\fP clauses and no \fCWillRepeatedly\fP clause, where \fIn\fP >= 1, the inferred cardinality is \fCTimes(n)\fP\&.
.IP "\(bu" 2
If there are \fIn\fP \fCWillOnce\fP clauses and one \fCWillRepeatedly\fP clause, where \fIn\fP >= 0, the inferred cardinality is \fCTimes(AtLeast(n))\fP\&.
.PP
.PP
The \fCTimes\fP clause can be used at most once on an expectation\&.
.SS "InSequence {#EXPECT_CALL\&.InSequence}"
\fC\&.InSequence(\fP*\fCsequences\&.\&.\&.\fP*\fC)\fP
.PP
Specifies that the mock function call is expected in a certain sequence\&.
.PP
The parameter *\fCsequences\&.\&.\&.\fP* is any number of \fC\fCSequence\fP\fP objects\&. Expected calls assigned to the same sequence are expected to occur in the order the expectations are declared\&.
.PP
For example, the following code sets the expectation that the \fCReset()\fP method of \fCmy_mock\fP is called before both \fCGetSize()\fP and \fC\fBDescribe()\fP\fP, and \fCGetSize()\fP and \fC\fBDescribe()\fP\fP can occur in any order relative to each other:
.PP
.PP
.nf
using ::testing::Sequence;
Sequence s1, s2;
\&.\&.\&.
EXPECT_CALL(my_mock, Reset())
    \&.InSequence(s1, s2);
EXPECT_CALL(my_mock, GetSize())
    \&.InSequence(s1);
EXPECT_CALL(my_mock, Describe())
    \&.InSequence(s2);
.fi
.PP
.PP
The \fCInSequence\fP clause can be used any number of times on an expectation\&.
.PP
See also the \fC\fCInSequence\fP class\fP\&.
.SS "After {#EXPECT_CALL\&.After}"
\fC\&.After(\fP*\fCexpectations\&.\&.\&.\fP*\fC)\fP
.PP
Specifies that the mock function call is expected to occur after one or more other calls\&.
.PP
The parameter *\fCexpectations\&.\&.\&.\fP* can be up to five \fC\fCExpectation\fP\fP or \fC\fCExpectationSet\fP\fP objects\&. The mock function call is expected to occur after all of the given expectations\&.
.PP
For example, the following code sets the expectation that the \fC\fBDescribe()\fP\fP method of \fCmy_mock\fP is called only after both \fCInitX()\fP and \fCInitY()\fP have been called\&.
.PP
.PP
.nf
using ::testing::Expectation;
\&.\&.\&.
Expectation init_x = EXPECT_CALL(my_mock, InitX());
Expectation init_y = EXPECT_CALL(my_mock, InitY());
EXPECT_CALL(my_mock, Describe())
    \&.After(init_x, init_y);
.fi
.PP
.PP
The \fCExpectationSet\fP object is helpful when the number of prerequisites for an expectation is large or variable, for example:
.PP
.PP
.nf
using ::testing::ExpectationSet;
\&.\&.\&.
ExpectationSet all_inits;
// Collect all expectations of InitElement() calls
for (int i = 0; i < element_count; i++) {
  all_inits += EXPECT_CALL(my_mock, InitElement(i));
}
EXPECT_CALL(my_mock, Describe())
    \&.After(all_inits);  // Expect Describe() call after all InitElement() calls
.fi
.PP
.PP
The \fCAfter\fP clause can be used any number of times on an expectation\&.
.SS "WillOnce {#EXPECT_CALL\&.WillOnce}"
\fC\&.WillOnce(\fP*\fCaction\fP*\fC)\fP
.PP
Specifies the mock function's actual behavior when invoked, for a single matching function call\&.
.PP
The parameter *\fCaction\fP* represents the \fCaction\fP that the function call will perform\&. See the \fBActions Reference\fP for a list of built-in actions\&.
.PP
The use of \fCWillOnce\fP implicitly sets a cardinality on the expectation when \fCTimes\fP is not specified\&. See \fC\fCTimes\fP\fP\&.
.PP
Each matching function call will perform the next action in the order declared\&. For example, the following code specifies that \fCmy_mock\&.GetNumber()\fP is expected to be called exactly 3 times and will return \fC1\fP, \fC2\fP, and \fC3\fP respectively on the first, second, and third calls:
.PP
.PP
.nf
using ::testing::Return;
\&.\&.\&.
EXPECT_CALL(my_mock, GetNumber())
    \&.WillOnce(Return(1))
    \&.WillOnce(Return(2))
    \&.WillOnce(Return(3));
.fi
.PP
.PP
The \fCWillOnce\fP clause can be used any number of times on an expectation\&. Unlike \fCWillRepeatedly\fP, the action fed to each \fCWillOnce\fP call will be called at most once, so may be a move-only type and/or have an \fC&&\fP-qualified call operator\&.
.SS "WillRepeatedly {#EXPECT_CALL\&.WillRepeatedly}"
\fC\&.WillRepeatedly(\fP*\fCaction\fP*\fC)\fP
.PP
Specifies the mock function's actual behavior when invoked, for all subsequent matching function calls\&. Takes effect after the actions specified in the \fC\fCWillOnce\fP\fP clauses, if any, have been performed\&.
.PP
The parameter *\fCaction\fP* represents the \fCaction\fP that the function call will perform\&. See the \fBActions Reference\fP for a list of built-in actions\&.
.PP
The use of \fCWillRepeatedly\fP implicitly sets a cardinality on the expectation when \fCTimes\fP is not specified\&. See \fC\fCTimes\fP\fP\&.
.PP
If any \fCWillOnce\fP clauses have been specified, matching function calls will perform those actions before the action specified by \fCWillRepeatedly\fP\&. See the following example:
.PP
.PP
.nf
using ::testing::Return;
\&.\&.\&.
EXPECT_CALL(my_mock, GetName())
    \&.WillRepeatedly(Return("John Doe"));  // Return "John Doe" on all calls

EXPECT_CALL(my_mock, GetNumber())
    \&.WillOnce(Return(42))        // Return 42 on the first call
    \&.WillRepeatedly(Return(7));  // Return 7 on all subsequent calls
.fi
.PP
.PP
The \fCWillRepeatedly\fP clause can be used at most once on an expectation\&.
.SS "RetiresOnSaturation {#EXPECT_CALL\&.RetiresOnSaturation}"
\fC\&.RetiresOnSaturation()\fP
.PP
Indicates that the expectation will no longer be active after the expected number of matching function calls has been reached\&.
.PP
The \fCRetiresOnSaturation\fP clause is only meaningful for expectations with an upper-bounded cardinality\&. The expectation will \fIretire\fP (no longer match any function calls) after it has been \fIsaturated\fP (the upper bound has been reached)\&. See the following example:
.PP
.PP
.nf
using ::testing::_;
using ::testing::AnyNumber;
\&.\&.\&.
EXPECT_CALL(my_mock, SetNumber(_))  // Expectation 1
    \&.Times(AnyNumber());
EXPECT_CALL(my_mock, SetNumber(7))  // Expectation 2
    \&.Times(2)
    \&.RetiresOnSaturation();
.fi
.PP
.PP
In the above example, the first two calls to \fCmy_mock\&.SetNumber(7)\fP match expectation 2, which then becomes inactive and no longer matches any calls\&. A third call to \fCmy_mock\&.SetNumber(7)\fP would then match expectation 1\&. Without \fCRetiresOnSaturation()\fP on expectation 2, a third call to \fCmy_mock\&.SetNumber(7)\fP would match expectation 2 again, producing a failure since the limit of 2 calls was exceeded\&.
.PP
The \fCRetiresOnSaturation\fP clause can be used at most once on an expectation and must be the last clause\&.
.SS "ON_CALL"
\fCON_CALL(\fP*\fCmock_object\fP*\fC,\fP*\fCmethod_name\fP*\fC(\fP*\fCmatchers\&.\&.\&.\fP*\fC))\fP
.PP
Defines what happens when the method *\fCmethod_name\fP* of the object *\fCmock_object\fP* is called with arguments that match the given matchers *\fCmatchers\&.\&.\&.\fP*\&. Requires a modifier clause to specify the method's behavior\&. \fIDoes not\fP set any expectations that the method will be called\&.
.PP
The parameter *\fCmatchers\&.\&.\&.\fP* is a comma-separated list of \fCmatchers\fP that correspond to each argument of the method *\fCmethod_name\fP*\&. The \fCON_CALL\fP specification will apply only to calls of *\fCmethod_name\fP* whose arguments match all of the matchers\&. If \fC(\fP*\fCmatchers\&.\&.\&.\fP*\fC)\fP is omitted, the behavior is as if each argument's matcher were a \fCwildcard matcher (\fC_\fP)\fP\&. See the \fBMatchers Reference\fP for a list of all built-in matchers\&.
.PP
The following chainable clauses can be used to set the method's behavior, and they must be used in the following order:
.PP
.PP
.nf
ON_CALL(mock_object, method_name(matchers\&.\&.\&.))
    \&.With(multi_argument_matcher)  // Can be used at most once
    \&.WillByDefault(action);        // Required
.fi
.PP
.PP
See details for each modifier clause below\&.
.SS "With {#ON_CALL\&.With}"
\fC\&.With(\fP*\fCmulti_argument_matcher\fP*\fC)\fP
.PP
Restricts the specification to only mock function calls whose arguments as a whole match the multi-argument matcher *\fCmulti_argument_matcher\fP*\&.
.PP
GoogleTest passes all of the arguments as one tuple into the matcher\&. The parameter *\fCmulti_argument_matcher\fP* must thus be a matcher of type \fCMatcher<std::tuple<A1, \&.\&.\&., An>>\fP, where \fCA1, \&.\&.\&., An\fP are the types of the function arguments\&.
.PP
For example, the following code sets the default behavior when \fCmy_mock\&.SetPosition()\fP is called with any two arguments, the first argument being less than the second:
.PP
.PP
.nf
using ::testing::_;
using ::testing::Lt;
using ::testing::Return;
\&.\&.\&.
ON_CALL(my_mock, SetPosition(_, _))
    \&.With(Lt())
    \&.WillByDefault(Return(true));
.fi
.PP
.PP
GoogleTest provides some built-in matchers for 2-tuples, including the \fCLt()\fP matcher above\&. See \fCMulti-argument Matchers\fP\&.
.PP
The \fCWith\fP clause can be used at most once with each \fCON_CALL\fP statement\&.
.SS "WillByDefault {#ON_CALL\&.WillByDefault}"
\fC\&.WillByDefault(\fP*\fCaction\fP*\fC)\fP
.PP
Specifies the default behavior of a matching mock function call\&.
.PP
The parameter *\fCaction\fP* represents the \fCaction\fP that the function call will perform\&. See the \fBActions Reference\fP for a list of built-in actions\&.
.PP
For example, the following code specifies that by default, a call to \fCmy_mock\&.Greet()\fP will return \fC'hello'\fP:
.PP
.PP
.nf
using ::testing::Return;
\&.\&.\&.
ON_CALL(my_mock, Greet())
    \&.WillByDefault(Return("hello"));
.fi
.PP
.PP
The action specified by \fCWillByDefault\fP is superseded by the actions specified on a matching \fCEXPECT_CALL\fP statement, if any\&. See the \fC\fCWillOnce\fP\fP and \fC\fCWillRepeatedly\fP\fP clauses of \fCEXPECT_CALL\fP\&.
.PP
The \fCWillByDefault\fP clause must be used exactly once with each \fCON_CALL\fP statement\&.
.SH "Classes"
.PP
GoogleTest defines the following classes for working with mocks\&.
.SS "Setting the Default Value for a Return Type"
\fC\fBtesting::DefaultValue\fP<T>\fP
.PP
Allows a user to specify the default value for a type \fCT\fP that is both copyable and publicly destructible (i\&.e\&. anything that can be used as a function return type)\&. For mock functions with a return type of \fCT\fP, this default value is returned from function calls that do not specify an action\&.
.PP
Provides the static methods \fCSet()\fP, \fCSetFactory()\fP, and \fCClear()\fP to manage the default value:
.PP
.PP
.nf
// Sets the default value to be returned\&. T must be copy constructible\&.
DefaultValue<T>::Set(value);

// Sets a factory\&. Will be invoked on demand\&. T must be move constructible\&.
T MakeT();
DefaultValue<T>::SetFactory(&MakeT);

// Unsets the default value\&.
DefaultValue<T>::Clear();
.fi
.PP
.SS "NiceMock"
\fC\fBtesting::NiceMock\fP<T>\fP
.PP
Represents a mock object that suppresses warnings on \fCuninteresting calls\fP\&. The template parameter \fCT\fP is any mock class, except for another \fCNiceMock\fP, \fCNaggyMock\fP, or \fCStrictMock\fP\&.
.PP
Usage of \fCNiceMock<T>\fP is analogous to usage of \fCT\fP\&. \fCNiceMock<T>\fP is a subclass of \fCT\fP, so it can be used wherever an object of type \fCT\fP is accepted\&. In addition, \fCNiceMock<T>\fP can be constructed with any arguments that a constructor of \fCT\fP accepts\&.
.PP
For example, the following code suppresses warnings on the mock \fCmy_mock\fP of type \fCMockClass\fP if a method other than \fCDoSomething()\fP is called:
.PP
.PP
.nf
using ::testing::NiceMock;
\&.\&.\&.
NiceMock<MockClass> my_mock("some", "args");
EXPECT_CALL(my_mock, DoSomething());
\&.\&.\&. code that uses my_mock \&.\&.\&.
.fi
.PP
.PP
\fCNiceMock<T>\fP only works for mock methods defined using the \fCMOCK_METHOD\fP macro directly in the definition of class \fCT\fP\&. If a mock method is defined in a base class of \fCT\fP, a warning might still be generated\&.
.PP
\fCNiceMock<T>\fP might not work correctly if the destructor of \fCT\fP is not virtual\&.
.SS "NaggyMock"
\fC\fBtesting::NaggyMock\fP<T>\fP
.PP
Represents a mock object that generates warnings on \fCuninteresting calls\fP\&. The template parameter \fCT\fP is any mock class, except for another \fCNiceMock\fP, \fCNaggyMock\fP, or \fCStrictMock\fP\&.
.PP
Usage of \fCNaggyMock<T>\fP is analogous to usage of \fCT\fP\&. \fCNaggyMock<T>\fP is a subclass of \fCT\fP, so it can be used wherever an object of type \fCT\fP is accepted\&. In addition, \fCNaggyMock<T>\fP can be constructed with any arguments that a constructor of \fCT\fP accepts\&.
.PP
For example, the following code generates warnings on the mock \fCmy_mock\fP of type \fCMockClass\fP if a method other than \fCDoSomething()\fP is called:
.PP
.PP
.nf
using ::testing::NaggyMock;
\&.\&.\&.
NaggyMock<MockClass> my_mock("some", "args");
EXPECT_CALL(my_mock, DoSomething());
\&.\&.\&. code that uses my_mock \&.\&.\&.
.fi
.PP
.PP
\fBMock\fP objects of type \fCT\fP by default behave the same way as \fCNaggyMock<T>\fP\&.
.SS "StrictMock"
\fC\fBtesting::StrictMock\fP<T>\fP
.PP
Represents a mock object that generates test failures on \fCuninteresting calls\fP\&. The template parameter \fCT\fP is any mock class, except for another \fCNiceMock\fP, \fCNaggyMock\fP, or \fCStrictMock\fP\&.
.PP
Usage of \fCStrictMock<T>\fP is analogous to usage of \fCT\fP\&. \fCStrictMock<T>\fP is a subclass of \fCT\fP, so it can be used wherever an object of type \fCT\fP is accepted\&. In addition, \fCStrictMock<T>\fP can be constructed with any arguments that a constructor of \fCT\fP accepts\&.
.PP
For example, the following code generates a test failure on the mock \fCmy_mock\fP of type \fCMockClass\fP if a method other than \fCDoSomething()\fP is called:
.PP
.PP
.nf
using ::testing::StrictMock;
\&.\&.\&.
StrictMock<MockClass> my_mock("some", "args");
EXPECT_CALL(my_mock, DoSomething());
\&.\&.\&. code that uses my_mock \&.\&.\&.
.fi
.PP
.PP
\fCStrictMock<T>\fP only works for mock methods defined using the \fCMOCK_METHOD\fP macro directly in the definition of class \fCT\fP\&. If a mock method is defined in a base class of \fCT\fP, a failure might not be generated\&.
.PP
\fCStrictMock<T>\fP might not work correctly if the destructor of \fCT\fP is not virtual\&.
.SS "Sequence"
\fC::testing::Sequence\fP
.PP
Represents a chronological sequence of expectations\&. See the \fC\fCInSequence\fP\fP clause of \fCEXPECT_CALL\fP for usage\&.
.SS "InSequence"
\fC::testing::InSequence\fP
.PP
An object of this type causes all expectations encountered in its scope to be put in an anonymous sequence\&.
.PP
This allows more convenient expression of multiple expectations in a single sequence:
.PP
.PP
.nf
using ::testing::InSequence;
{
  InSequence seq;

  // The following are expected to occur in the order declared\&.
  EXPECT_CALL(\&.\&.\&.);
  EXPECT_CALL(\&.\&.\&.);
  \&.\&.\&.
  EXPECT_CALL(\&.\&.\&.);
}
.fi
.PP
.PP
The name of the \fCInSequence\fP object does not matter\&.
.SS "Expectation"
\fC::testing::Expectation\fP
.PP
Represents a mock function call expectation as created by \fC\fCEXPECT_CALL\fP\fP:
.PP
.PP
.nf
using ::testing::Expectation;
Expectation my_expectation = EXPECT_CALL(\&.\&.\&.);
.fi
.PP
.PP
Useful for specifying sequences of expectations; see the \fC\fCAfter\fP\fP clause of \fCEXPECT_CALL\fP\&.
.SS "ExpectationSet"
\fC::testing::ExpectationSet\fP
.PP
Represents a set of mock function call expectations\&.
.PP
Use the \fC+=\fP operator to add \fC\fCExpectation\fP\fP objects to the set:
.PP
.PP
.nf
using ::testing::ExpectationSet;
ExpectationSet my_expectations;
my_expectations += EXPECT_CALL(\&.\&.\&.);
.fi
.PP
.PP
Useful for specifying sequences of expectations; see the \fC\fCAfter\fP\fP clause of \fCEXPECT_CALL\fP\&. 
