.TH "md_build__deps_googletest_src_docs_reference_actions" 3 "Tue Sep 12 2023" "Week2" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_build__deps_googletest_src_docs_reference_actions \- Actions Reference 
\fC\fBActions\fP\fP specify what a mock function should do when invoked\&. This page lists the built-in actions provided by GoogleTest\&. All actions are defined in the \fC\fBtesting\fP\fP namespace\&.
.SH "Returning a Value"
.PP
Action   Description    \fC\fBReturn()\fP\fP   Return from a \fCvoid\fP mock function\&.    \fCReturn(value)\fP   Return \fCvalue\fP\&. If the type of \fCvalue\fP is different to the mock function's return type, \fCvalue\fP is converted to the latter type \fIat the time the expectation is set\fP, not when the action is executed\&.    \fCReturnArg<N>()\fP   Return the \fCN\fP-th (0-based) argument\&.    \fCReturnNew<T>(a1, \&.\&.\&., ak)\fP   Return \fCnew T(a1, \&.\&.\&., ak)\fP; a different object is created each time\&.    \fC\fBReturnNull()\fP\fP   Return a null pointer\&.    \fCReturnPointee(ptr)\fP   Return the value pointed to by \fCptr\fP\&.    \fCReturnRef(variable)\fP   Return a reference to \fCvariable\fP\&.    \fCReturnRefOfCopy(value)\fP   Return a reference to a copy of \fCvalue\fP; the copy lives as long as the action\&.    \fCReturnRoundRobin({a1, \&.\&.\&., ak})\fP   Each call will return the next \fCai\fP in the list, starting at the beginning when the end of the list is reached\&.   
.SH "Side Effects"
.PP
Action   Description    \fCAssign(&variable, value)\fP   Assign \fCvalue\fP to variable\&.    \fCDeleteArg<N>()\fP   Delete the \fCN\fP-th (0-based) argument, which must be a pointer\&.    \fCSaveArg<N>(pointer)\fP   Save the \fCN\fP-th (0-based) argument to \fC*pointer\fP\&.    \fCSaveArgPointee<N>(pointer)\fP   Save the value pointed to by the \fCN\fP-th (0-based) argument to \fC*pointer\fP\&.    \fCSetArgReferee<N>(value)\fP   Assign \fCvalue\fP to the variable referenced by the \fCN\fP-th (0-based) argument\&.    \fCSetArgPointee<N>(value)\fP   Assign \fCvalue\fP to the variable pointed by the \fCN\fP-th (0-based) argument\&.    \fCSetArgumentPointee<N>(value)\fP   Same as \fCSetArgPointee<N>(value)\fP\&. Deprecated\&. Will be removed in v1\&.7\&.0\&.    \fCSetArrayArgument<N>(first, last)\fP   Copies the elements in source range [\fCfirst\fP, \fClast\fP) to the array pointed to by the \fCN\fP-th (0-based) argument, which can be either a pointer or an iterator\&. The action does not take ownership of the elements in the source range\&.    \fCSetErrnoAndReturn(error, value)\fP   Set \fCerrno\fP to \fCerror\fP and return \fCvalue\fP\&.    \fCThrow(exception)\fP   Throws the given exception, which can be any copyable value\&. Available since v1\&.1\&.0\&.   
.SH "Using a Function, Functor, or Lambda as an Action"
.PP
In the following, by 'callable' we mean a free function, \fCstd::function\fP, functor, or lambda\&.
.PP
Action   Description    \fCf\fP   Invoke \fCf\fP with the arguments passed to the mock function, where \fCf\fP is a callable\&.    \fCInvoke(f)\fP   Invoke \fCf\fP with the arguments passed to the mock function, where \fCf\fP can be a global/static function or a functor\&.    \fCInvoke(object_pointer, &class::method)\fP   Invoke the method on the object with the arguments passed to the mock function\&.    \fCInvokeWithoutArgs(f)\fP   Invoke \fCf\fP, which can be a global/static function or a functor\&. \fCf\fP must take no arguments\&.    \fCInvokeWithoutArgs(object_pointer, &class::method)\fP   Invoke the method on the object, which takes no arguments\&.    \fCInvokeArgument<N>(arg1, arg2, \&.\&.\&., argk)\fP   Invoke the mock function's \fCN\fP-th (0-based) argument, which must be a function or a functor, with the \fCk\fP arguments\&.   
.PP
The return value of the invoked function is used as the return value of the action\&.
.PP
When defining a callable to be used with \fCInvoke*()\fP, you can declare any unused parameters as \fCUnused\fP:
.PP
.PP
.nf
using ::testing::Invoke;
double Distance(Unused, double x, double y) { return sqrt(x*x + y*y); }
\&.\&.\&.
EXPECT_CALL(mock, Foo("Hi", _, _))\&.WillOnce(Invoke(Distance));
.fi
.PP
.PP
\fCInvoke(callback)\fP and \fCInvokeWithoutArgs(callback)\fP take ownership of \fCcallback\fP, which must be permanent\&. The type of \fCcallback\fP must be a base callback type instead of a derived one, e\&.g\&.
.PP
.PP
.nf
BlockingClosure* done = new BlockingClosure;
\&.\&.\&. Invoke(done) \&.\&.\&.;  // This won't compile!

Closure* done2 = new BlockingClosure;
\&.\&.\&. Invoke(done2) \&.\&.\&.;  // This works\&.
.fi
.PP
.PP
In \fCInvokeArgument<N>(\&.\&.\&.)\fP, if an argument needs to be passed by reference, wrap it inside \fCstd::ref()\fP\&. For example,
.PP
.PP
.nf
using ::testing::InvokeArgument;
\&.\&.\&.
InvokeArgument<2>(5, string("Hi"), std::ref(foo))
.fi
.PP
.PP
calls the mock function's #2 argument, passing to it \fC5\fP and \fCstring('Hi')\fP by value, and \fCfoo\fP by reference\&.
.SH "Default Action"
.PP
Action   Description    \fC\fBDoDefault()\fP\fP   Do the default action (specified by \fC\fBON_CALL()\fP\fP or the built-in one)\&.   
.PP
{: \&.callout \&.note} \fBNote:\fP due to technical reasons, \fC\fBDoDefault()\fP\fP cannot be used inside a composite action - trying to do so will result in a run-time error\&.
.SH "Composite Actions"
.PP
Action   Description    \fCDoAll(a1, a2, \&.\&.\&., an)\fP   Do all actions \fCa1\fP to \fCan\fP and return the result of \fCan\fP in each invocation\&. The first \fCn - 1\fP sub-actions must return void and will receive a readonly view of the arguments\&.    \fCIgnoreResult(a)\fP   Perform action \fCa\fP and ignore its result\&. \fCa\fP must not return void\&.    \fCWithArg<N>(a)\fP   Pass the \fCN\fP-th (0-based) argument of the mock function to action \fCa\fP and perform it\&.    \fCWithArgs<N1, N2, \&.\&.\&., Nk>(a)\fP   Pass the selected (0-based) arguments of the mock function to action \fCa\fP and perform it\&.    \fCWithoutArgs(a)\fP   Perform action \fCa\fP without any arguments\&.   
.SH "Defining Actions"
.PP
Macro   Description    \fC\fBACTION(Sum)\fP { return arg0 + arg1; }\fP   Defines an action \fCSum()\fP to return the sum of the mock function's argument #0 and #1\&.    \fC\fBACTION_P(Plus, n)\fP { return arg0 + n; }\fP   Defines an action \fCPlus(n)\fP to return the sum of the mock function's argument #0 and \fCn\fP\&.    \fCACTION_Pk(Foo, p1, \&.\&.\&., pk) { statements; }\fP   Defines a parameterized action \fCFoo(p1, \&.\&.\&., pk)\fP to execute the given \fCstatements\fP\&.   
.PP
The \fCACTION*\fP macros cannot be used inside a function or class\&. 
