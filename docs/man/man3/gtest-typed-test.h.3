.TH "build/_deps/googletest-src/googletest/include/gtest/gtest-typed-test.h" 3 "Tue Sep 12 2023" "Week2" \" -*- nroff -*-
.ad l
.nh
.SH NAME
build/_deps/googletest-src/googletest/include/gtest/gtest-typed-test.h
.SH SYNOPSIS
.br
.PP
\fC#include 'gtest/internal/gtest\-internal\&.h'\fP
.br
\fC#include 'gtest/internal/gtest\-port\&.h'\fP
.br
\fC#include 'gtest/internal/gtest\-type\-util\&.h'\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBGTEST_TYPE_PARAMS_\fP(TestSuiteName)   gtest_type_params_##TestSuiteName##_"
.br
.ti -1c
.RI "#define \fBGTEST_NAME_GENERATOR_\fP(TestSuiteName)     gtest_type_params_##TestSuiteName##_NameGenerator"
.br
.ti -1c
.RI "#define \fBTYPED_TEST_SUITE\fP(CaseName,  Types, \&.\&.\&.)"
.br
.ti -1c
.RI "#define \fBTYPED_TEST\fP(CaseName,  TestName)"
.br
.ti -1c
.RI "#define \fBTYPED_TEST_CASE\fP"
.br
.ti -1c
.RI "#define \fBGTEST_SUITE_NAMESPACE_\fP(TestSuiteName)   gtest_suite_##TestSuiteName##_"
.br
.ti -1c
.RI "#define \fBGTEST_TYPED_TEST_SUITE_P_STATE_\fP(TestSuiteName)     gtest_typed_test_suite_p_state_##TestSuiteName##_"
.br
.ti -1c
.RI "#define \fBGTEST_REGISTERED_TEST_NAMES_\fP(TestSuiteName)     gtest_registered_test_names_##TestSuiteName##_"
.br
.ti -1c
.RI "#define \fBTYPED_TEST_SUITE_P\fP(SuiteName)"
.br
.ti -1c
.RI "#define \fBTYPED_TEST_CASE_P\fP"
.br
.ti -1c
.RI "#define \fBTYPED_TEST_P\fP(SuiteName,  TestName)"
.br
.ti -1c
.RI "#define \fBREGISTER_TYPED_TEST_SUITE_P\fP(SuiteName, \&.\&.\&.)"
.br
.ti -1c
.RI "#define \fBREGISTER_TYPED_TEST_CASE_P\fP"
.br
.ti -1c
.RI "#define \fBINSTANTIATE_TYPED_TEST_SUITE_P\fP(Prefix,  SuiteName,  Types, \&.\&.\&.)"
.br
.ti -1c
.RI "#define \fBINSTANTIATE_TYPED_TEST_CASE_P\fP"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define GTEST_NAME_GENERATOR_(TestSuiteName)     gtest_type_params_##TestSuiteName##_NameGenerator"

.PP
Definition at line 188 of file gtest\-typed\-test\&.h\&.
.SS "#define GTEST_REGISTERED_TEST_NAMES_(TestSuiteName)     gtest_registered_test_names_##TestSuiteName##_"

.PP
Definition at line 253 of file gtest\-typed\-test\&.h\&.
.SS "#define GTEST_SUITE_NAMESPACE_(TestSuiteName)   gtest_suite_##TestSuiteName##_"

.PP
Definition at line 240 of file gtest\-typed\-test\&.h\&.
.SS "#define GTEST_TYPE_PARAMS_(TestSuiteName)   gtest_type_params_##TestSuiteName##_"

.PP
Definition at line 184 of file gtest\-typed\-test\&.h\&.
.SS "#define GTEST_TYPED_TEST_SUITE_P_STATE_(TestSuiteName)     gtest_typed_test_suite_p_state_##TestSuiteName##_"

.PP
Definition at line 246 of file gtest\-typed\-test\&.h\&.
.SS "#define INSTANTIATE_TYPED_TEST_CASE_P"
\fBValue:\fP
.PP
.nf
  static_assert(                                                           \
      ::testing::internal::InstantiateTypedTestCase_P_IsDeprecated(), ""); \
  INSTANTIATE_TYPED_TEST_SUITE_P
.fi
.PP
Definition at line 325 of file gtest\-typed\-test\&.h\&.
.SS "#define INSTANTIATE_TYPED_TEST_SUITE_P(Prefix, SuiteName, Types,  \&.\&.\&.)"
\fBValue:\fP
.PP
.nf
  static_assert(sizeof(GTEST_STRINGIFY_(Prefix)) > 1,                     \
                "test-suit-prefix must not be empty");                    \
  static bool gtest_##Prefix##_##SuiteName GTEST_ATTRIBUTE_UNUSED_ =      \
      ::testing::internal::TypeParameterizedTestSuite<                    \
          SuiteName, GTEST_SUITE_NAMESPACE_(SuiteName)::gtest_AllTests_,  \
          ::testing::internal::GenerateTypeList<Types>::type>::           \
          Register(GTEST_STRINGIFY_(Prefix),                              \
                   ::testing::internal::CodeLocation(__FILE__, __LINE__), \
                   &GTEST_TYPED_TEST_SUITE_P_STATE_(SuiteName),           \
                   GTEST_STRINGIFY_(SuiteName),                           \
                   GTEST_REGISTERED_TEST_NAMES_(SuiteName),               \
                   ::testing::internal::GenerateNames<                    \
                       ::testing::internal::NameGeneratorSelector<        \
                           __VA_ARGS__>::type,                            \
                       ::testing::internal::GenerateTypeList<Types>::type>())
.fi
.PP
Definition at line 306 of file gtest\-typed\-test\&.h\&.
.SS "#define REGISTER_TYPED_TEST_CASE_P"
\fBValue:\fP
.PP
.nf
  static_assert(::testing::internal::RegisterTypedTestCase_P_IsDeprecated(), \
                "");                                                         \
  REGISTER_TYPED_TEST_SUITE_P
.fi
.PP
Definition at line 300 of file gtest\-typed\-test\&.h\&.
.SS "#define REGISTER_TYPED_TEST_SUITE_P(SuiteName,  \&.\&.\&.)"
\fBValue:\fP
.PP
.nf
  namespace GTEST_SUITE_NAMESPACE_(SuiteName) {                             \
  typedef ::testing::internal::Templates<__VA_ARGS__> gtest_AllTests_;      \
  }                                                                         \
  static const char* const GTEST_REGISTERED_TEST_NAMES_(                    \
      SuiteName) GTEST_ATTRIBUTE_UNUSED_ =                                  \
      GTEST_TYPED_TEST_SUITE_P_STATE_(SuiteName)\&.VerifyRegisteredTestNames( \
          GTEST_STRINGIFY_(SuiteName), __FILE__, __LINE__, #__VA_ARGS__)
.fi
.PP
Definition at line 289 of file gtest\-typed\-test\&.h\&.
.SS "#define TYPED_TEST(CaseName, TestName)"
\fBValue:\fP
.PP
.nf
  static_assert(sizeof(GTEST_STRINGIFY_(TestName)) > 1,                       \
                "test-name must not be empty");                               \
  template <typename gtest_TypeParam_>                                        \
  class GTEST_TEST_CLASS_NAME_(CaseName, TestName)                            \
      : public CaseName<gtest_TypeParam_> {                                   \
   private:                                                                   \
    typedef CaseName<gtest_TypeParam_> TestFixture;                           \
    typedef gtest_TypeParam_ TypeParam;                                       \
    void TestBody() override;                                                 \
  };                                                                          \
  static bool gtest_##CaseName##_##TestName##_registered_                     \
      GTEST_ATTRIBUTE_UNUSED_ = ::testing::internal::TypeParameterizedTest<   \
          CaseName,                                                           \
          ::testing::internal::TemplateSel<GTEST_TEST_CLASS_NAME_(CaseName,   \
                                                                  TestName)>, \
          GTEST_TYPE_PARAMS_(                                                 \
              CaseName)>::Register("",                                        \
                                   ::testing::internal::CodeLocation(         \
                                       __FILE__, __LINE__),                   \
                                   GTEST_STRINGIFY_(CaseName),                \
                                   GTEST_STRINGIFY_(TestName), 0,             \
                                   ::testing::internal::GenerateNames<        \
                                       GTEST_NAME_GENERATOR_(CaseName),       \
                                       GTEST_TYPE_PARAMS_(CaseName)>());      \
  template <typename gtest_TypeParam_>                                        \
  void GTEST_TEST_CLASS_NAME_(CaseName,                                       \
                              TestName)<gtest_TypeParam_>::TestBody()
.fi
.PP
Definition at line 197 of file gtest\-typed\-test\&.h\&.
.SS "#define TYPED_TEST_CASE"
\fBValue:\fP
.PP
.nf
  static_assert(::testing::internal::TypedTestCaseIsDeprecated(), ""); \
  TYPED_TEST_SUITE
.fi
.PP
Definition at line 228 of file gtest\-typed\-test\&.h\&.
.SS "#define TYPED_TEST_CASE_P"
\fBValue:\fP
.PP
.nf
  static_assert(::testing::internal::TypedTestCase_P_IsDeprecated(), ""); \
  TYPED_TEST_SUITE_P
.fi
.PP
Definition at line 265 of file gtest\-typed\-test\&.h\&.
.SS "#define TYPED_TEST_P(SuiteName, TestName)"
\fBValue:\fP
.PP
.nf
  namespace GTEST_SUITE_NAMESPACE_(SuiteName) {                     \
  template <typename gtest_TypeParam_>                              \
  class TestName : public SuiteName<gtest_TypeParam_> {             \
   private:                                                         \
    typedef SuiteName<gtest_TypeParam_> TestFixture;                \
    typedef gtest_TypeParam_ TypeParam;                             \
    void TestBody() override;                                       \
  };                                                                \
  static bool gtest_##TestName##_defined_ GTEST_ATTRIBUTE_UNUSED_ = \
      GTEST_TYPED_TEST_SUITE_P_STATE_(SuiteName)\&.AddTestName(       \
          __FILE__, __LINE__, GTEST_STRINGIFY_(SuiteName),          \
          GTEST_STRINGIFY_(TestName));                              \
  }                                                                 \
  template <typename gtest_TypeParam_>                              \
  void GTEST_SUITE_NAMESPACE_(                                      \
      SuiteName)::TestName<gtest_TypeParam_>::TestBody()
.fi
.PP
Definition at line 270 of file gtest\-typed\-test\&.h\&.
.SS "#define TYPED_TEST_SUITE(CaseName, Types,  \&.\&.\&.)"
\fBValue:\fP
.PP
.nf
  typedef ::testing::internal::GenerateTypeList<Types>::type            \
      GTEST_TYPE_PARAMS_(CaseName);                                     \
  typedef ::testing::internal::NameGeneratorSelector<__VA_ARGS__>::type \
  GTEST_NAME_GENERATOR_(CaseName)
.fi
.PP
Definition at line 191 of file gtest\-typed\-test\&.h\&.
.SS "#define TYPED_TEST_SUITE_P(SuiteName)"
\fBValue:\fP
.PP
.nf
  static ::testing::internal::TypedTestSuitePState \
  GTEST_TYPED_TEST_SUITE_P_STATE_(SuiteName)
.fi
.PP
Definition at line 259 of file gtest\-typed\-test\&.h\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Week2 from the source code\&.
